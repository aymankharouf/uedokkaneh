[{"/home/ayman/projects/uedokkaneh/src/index.tsx":"1","/home/ayman/projects/uedokkaneh/src/reportWebVitals.ts":"2","/home/ayman/projects/uedokkaneh/src/serviceWorkerRegistration.ts":"3","/home/ayman/projects/uedokkaneh/src/app.tsx":"4","/home/ayman/projects/uedokkaneh/src/pages/categories.tsx":"5","/home/ayman/projects/uedokkaneh/src/pages/home.tsx":"6","/home/ayman/projects/uedokkaneh/src/pages/panel.tsx":"7","/home/ayman/projects/uedokkaneh/src/pages/login.tsx":"8","/home/ayman/projects/uedokkaneh/src/pages/register.tsx":"9","/home/ayman/projects/uedokkaneh/src/pages/pack-details.tsx":"10","/home/ayman/projects/uedokkaneh/src/pages/basket.tsx":"11","/home/ayman/projects/uedokkaneh/src/pages/packs.tsx":"12","/home/ayman/projects/uedokkaneh/src/pages/confirm-order.tsx":"13","/home/ayman/projects/uedokkaneh/src/pages/add-alarm.tsx":"14","/home/ayman/projects/uedokkaneh/src/pages/orders-list.tsx":"15","/home/ayman/projects/uedokkaneh/src/pages/order-details.tsx":"16","/home/ayman/projects/uedokkaneh/src/pages/password-request.tsx":"17","/home/ayman/projects/uedokkaneh/src/pages/store-summary.tsx":"18","/home/ayman/projects/uedokkaneh/src/pages/invite-friend.tsx":"19","/home/ayman/projects/uedokkaneh/src/pages/store-packs.tsx":"20","/home/ayman/projects/uedokkaneh/src/pages/change-password.tsx":"21","/home/ayman/projects/uedokkaneh/src/pages/hints.tsx":"22","/home/ayman/projects/uedokkaneh/src/pages/help.tsx":"23","/home/ayman/projects/uedokkaneh/src/pages/notifications.tsx":"24","/home/ayman/projects/uedokkaneh/src/pages/edit-order.tsx":"25","/home/ayman/projects/uedokkaneh/src/pages/advert.tsx":"26","/home/ayman/projects/uedokkaneh/src/pages/purchased-packs.tsx":"27","/home/ayman/projects/uedokkaneh/src/pages/friends.tsx":"28","/home/ayman/projects/uedokkaneh/src/data/reducer.ts":"29","/home/ayman/projects/uedokkaneh/src/data/firebase.ts":"30","/home/ayman/projects/uedokkaneh/src/data/labels.ts":"31","/home/ayman/projects/uedokkaneh/src/data/config.ts":"32","/home/ayman/projects/uedokkaneh/src/data/actions.ts":"33","/home/ayman/projects/uedokkaneh/src/pages/footer.tsx":"34","/home/ayman/projects/uedokkaneh/src/pages/rating-stars.tsx":"35","/home/ayman/projects/uedokkaneh/src/pages/header.tsx":"36"},{"size":994,"mtime":1655780447149,"results":"37","hashOfConfig":"38"},{"size":425,"mtime":1655455252746,"results":"39","hashOfConfig":"38"},{"size":5256,"mtime":1655455252746,"results":"40","hashOfConfig":"38"},{"size":10396,"mtime":1655783897545,"results":"41","hashOfConfig":"38"},{"size":1833,"mtime":1655783419665,"results":"42","hashOfConfig":"38"},{"size":3128,"mtime":1655783569784,"results":"43","hashOfConfig":"38"},{"size":3311,"mtime":1655783755747,"results":"44","hashOfConfig":"38"},{"size":3302,"mtime":1655783608476,"results":"45","hashOfConfig":"38"},{"size":4930,"mtime":1655783809556,"results":"46","hashOfConfig":"38"},{"size":12635,"mtime":1655783731926,"results":"47","hashOfConfig":"38"},{"size":5700,"mtime":1655783411481,"results":"48","hashOfConfig":"38"},{"size":4943,"mtime":1655783747111,"results":"49","hashOfConfig":"38"},{"size":7625,"mtime":1655783518987,"results":"50","hashOfConfig":"38"},{"size":7181,"mtime":1655783305667,"results":"51","hashOfConfig":"38"},{"size":1683,"mtime":1655783675509,"results":"52","hashOfConfig":"38"},{"size":8389,"mtime":1655783665073,"results":"53","hashOfConfig":"38"},{"size":2369,"mtime":1655783764295,"results":"54","hashOfConfig":"38"},{"size":2325,"mtime":1655783827224,"results":"55","hashOfConfig":"38"},{"size":3270,"mtime":1655783592408,"results":"56","hashOfConfig":"38"},{"size":3656,"mtime":1655783818384,"results":"57","hashOfConfig":"38"},{"size":2698,"mtime":1655783520699,"results":"58","hashOfConfig":"38"},{"size":3123,"mtime":1655783561080,"results":"59","hashOfConfig":"38"},{"size":2802,"mtime":1655783551743,"results":"60","hashOfConfig":"38"},{"size":2386,"mtime":1655783626629,"results":"61","hashOfConfig":"38"},{"size":5984,"mtime":1655783517851,"results":"62","hashOfConfig":"38"},{"size":1098,"mtime":1655783864117,"results":"63","hashOfConfig":"38"},{"size":6235,"mtime":1655783787635,"results":"64","hashOfConfig":"38"},{"size":2944,"mtime":1655783515199,"results":"65","hashOfConfig":"38"},{"size":6280,"mtime":1655780517638,"results":"66","hashOfConfig":"38"},{"size":1229,"mtime":1655455252742,"results":"67","hashOfConfig":"38"},{"size":8746,"mtime":1655455252742,"results":"68","hashOfConfig":"38"},{"size":2861,"mtime":1655455252742,"results":"69","hashOfConfig":"38"},{"size":10953,"mtime":1655783224910,"results":"70","hashOfConfig":"38"},{"size":1162,"mtime":1655783494286,"results":"71","hashOfConfig":"38"},{"size":979,"mtime":1655455252746,"results":"72","hashOfConfig":"38"},{"size":1731,"mtime":1655783543535,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"1ph2h8z",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"76"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"76"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"76"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"76"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"76"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"76"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"76"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"76"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"76"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"76"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"76"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"76"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"76"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"76"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"76"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"76"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"76"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"76"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"76"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"76"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"76"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"76"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"76"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"76"},"/home/ayman/projects/uedokkaneh/src/index.tsx",[],["172","173"],"/home/ayman/projects/uedokkaneh/src/reportWebVitals.ts",[],"/home/ayman/projects/uedokkaneh/src/serviceWorkerRegistration.ts",[],"/home/ayman/projects/uedokkaneh/src/app.tsx",["174"],"import { IonApp, IonRouterOutlet, IonSplitPane } from '@ionic/react'\nimport { IonReactRouter } from '@ionic/react-router'\nimport { Route } from 'react-router-dom'\nimport { useDispatch } from 'react-redux';\nimport { Category, Pack, PackPrice, Advert as AdvertType, PasswordRequest as PasswordRequestType, Order, UserInfo, Notification } from './data/types'\nimport firebase from './data/firebase'\n\n/* Core CSS required for Ionic components to work properly */\nimport '@ionic/react/css/core.css'\n\n/* Basic CSS for apps built with Ionic */\nimport '@ionic/react/css/normalize.css'\nimport '@ionic/react/css/structure.css'\nimport '@ionic/react/css/typography.css'\n\n/* Optional CSS utils that can be commented out */\nimport '@ionic/react/css/padding.css'\nimport '@ionic/react/css/float-elements.css'\nimport '@ionic/react/css/text-alignment.css'\nimport '@ionic/react/css/text-transformation.css'\nimport '@ionic/react/css/flex-utils.css'\nimport '@ionic/react/css/display.css'\n\n/* Theme variables */\nimport './css/variables.css'\nimport './css/app.css'\n\nimport Home from './pages/home'\nimport Categories from './pages/categories'\nimport Panel from './pages/panel'\nimport Login from './pages/login'\nimport Register from './pages/register'\nimport Packs from './pages/packs'\nimport PackDetails from './pages/pack-details'\nimport Basket from './pages/basket'\nimport ConfirmOrder from './pages/confirm-order'\nimport OrdersList from './pages/orders-list'\nimport OrderDetails from './pages/order-details'\nimport AddAlarm from './pages/add-alarm'\nimport PasswordRequest from './pages/password-request'\nimport InviteFriend from './pages/invite-friend'\nimport StoreSummary from './pages/store-summary'\nimport StorePacks from './pages/store-packs'\nimport ChangePassword from './pages/change-password'\nimport Hints from './pages/hints'\nimport Help from './pages/help'\nimport Notifications from './pages/notifications'\nimport PurchasedPacks from './pages/purchased-packs'\nimport Advert from './pages/advert'\nimport EditOrder from './pages/edit-order'\nimport Friends from './pages/friends'\nimport { useEffect } from 'react';\n\n\nconst App = () => {\n  const dispatch = useDispatch()\n  const href = window.location.href\n  if (href.length - href.replaceAll('/', '').length !== (href.endsWith('/') ? 3 : 2)) {\n    window.location.href = window.location.hostname === 'localhost' ? href.substr(0, 21) : href.substr(0, 28)\n  }\n  useEffect(() => {\n    const unsubscribeCategories = firebase.firestore().collection('categories').where('isActive', '==', true).onSnapshot(docs => {\n      let categories: Category[] = []\n      docs.forEach(doc => {\n        categories.push({\n          id: doc.id,\n          name: doc.data().name,\n          parentId: doc.data().parentId,\n          ordering: doc.data().ordering,\n          isLeaf: doc.data().isLeaf\n        })\n      })\n      dispatch({type: 'SET_CATEGORIES', payload: categories})\n    }, err => {\n      unsubscribeCategories()\n    })  \n    const unsubscribePacks = firebase.firestore().collection('packs').where('price', '>', 0).onSnapshot(docs => {\n      let packs: Pack[] = []\n      let packPrices: PackPrice[] = []\n      docs.forEach(doc => {\n        packs.push({\n          id: doc.id,\n          name: doc.data().name,\n          productId: doc.data().productId,\n          productName: doc.data().productName,\n          productAlias: doc.data().productAlias,\n          productDescription: doc.data().productDescription,\n          imageUrl: doc.data().imageUrl,\n          price: doc.data().price,\n          categoryId: doc.data().categoryId,\n          sales: doc.data().sales,\n          rating: doc.data().rating,\n          ratingCount: doc.data().ratingCount,\n          isOffer: doc.data().isOffer,\n          offerEnd: doc.data().offerEnd,\n          weightedPrice: doc.data().weightedPrice,\n          isDivided: doc.data().isDivided,\n          trademark: doc.data().trademark,\n          country: doc.data().country,\n          closeExpired: doc.data().closeExpired,\n          byWeight: doc.data().byWeight\n        })\n        if (doc.data().prices) {\n          doc.data().prices.forEach((p: any) => {\n            packPrices.push({\n              packId: doc.id,\n              storeId: p.storeId,\n              price: p.price,\n              time: p.time.toDate()\n            })\n          })\n        }\n      })\n      dispatch({type: 'SET_PACKS', payload: packs})\n      dispatch({type: 'SET_PACK_PRICES', payload: packPrices})\n    }, err => {\n      unsubscribePacks()\n    })\n    const unsubscribeAdverts = firebase.firestore().collection('adverts').where('isActive', '==', true).onSnapshot(docs => {\n      let adverts: AdvertType[] = []\n      docs.forEach(doc => {\n        adverts.push({\n          id: doc.id,\n          type: doc.data().type,\n          title: doc.data().title,\n          text: doc.data().text,\n          isActive: doc.data().isActive,\n          imageUrl: doc.data().imageUrl\n        })\n      })\n      dispatch({type: 'SET_ADVERTS', payload: adverts})\n    }, err => {\n      unsubscribeAdverts()\n    })  \n    const unsubscribeRegions = firebase.firestore().collection('lookups').doc('r').onSnapshot(doc => {\n      if (doc.exists) dispatch({type: 'SET_REGIONS', payload: doc.data()?.values})\n    }, err => {\n      unsubscribeRegions()\n    })  \n    const unsubscribePasswordRequests = firebase.firestore().collection('password-requests').onSnapshot(docs => {\n      let passwordRequests: PasswordRequestType[] = []\n      docs.forEach(doc => {\n        passwordRequests.push({\n          id: doc.id,\n          mobile: doc.data().mobile\n        })\n      })\n      dispatch({type: 'SET_PASSWORD_REQUESTS', payload: passwordRequests})\n    }, err => {\n      unsubscribePasswordRequests()\n    })  \n    firebase.auth().onAuthStateChanged(user => {\n      dispatch({type: 'LOGIN', payload: user})\n      if (user){\n        const localData = localStorage.getItem('basket')\n        const basket = localData ? JSON.parse(localData) : []\n        if (basket) dispatch({type: 'SET_BASKET', payload: basket}) \n        const unsubscribeUser = firebase.firestore().collection('users').doc(user.uid).onSnapshot(doc => {\n          if (doc.exists){\n            const userInfo: UserInfo = {\n              mobile: doc.data()!.mobile,\n              regionId: doc.data()!.regionId,\n              ratings: doc.data()!.ratings\n            }\n            const notifications: Notification[] = []\n            if (doc.data()!.notifications) {\n              doc.data()!.notifications.forEach((n: any) => {\n                notifications.push({\n                  id: n.id,\n                  title: n.title,\n                  text: n.text,\n                  status: n.status,\n                  time: n.time.toDate()\n                })\n              })\n            }\n            dispatch({type: 'SET_USER_INFO', payload: userInfo})\n            dispatch({type: 'SET_NOTIFICATIONS', payload: notifications})\n          } else {\n            firebase.auth().signOut()\n          }\n        }, err => {\n          unsubscribeUser()\n        })  \n        const unsubscribeCustomer = firebase.firestore().collection('customers').doc(user.uid).onSnapshot(doc => {\n          if (doc.exists){\n            dispatch({type: 'SET_CUSTOMER_INFO', payload: doc.data()})\n          }\n        }, err => {\n          unsubscribeCustomer()\n        })  \n        const unsubscribeOrders = firebase.firestore().collection('orders').where('userId', '==', user.uid).onSnapshot(docs => {\n          let orders: Order[] = []\n          docs.forEach(doc => {\n            orders.push({\n              id: doc.id,\n              basket: doc.data().basket,\n              status: doc.data().status,\n              total: doc.data().total,\n              fixedFees: doc.data().fixedFees,\n              deliveryFees: doc.data().deliveryFees,\n              discount: doc.data().discount,\n              fraction: doc.data().fraction,\n              requestType: doc.data().requestType,\n              time: doc.data().time.toDate()\n            })\n          })\n          dispatch({type: 'SET_ORDERS', payload: orders})\n        }, err => {\n          unsubscribeOrders()\n        }) \n      } else {\n        dispatch({type: 'CLEAR_USER_INFO'})\n        dispatch({type: 'CLEAR_CUSTOMER_INFO'})\n        dispatch({type: 'SET_ORDERS', payload: []})\n      }\n    })\n  }, [])\n  return (\n    <IonApp dir=\"rtl\">\n      <IonReactRouter>\n        <IonSplitPane contentId=\"main\">\n          <Panel />\n          <IonRouterOutlet id=\"main\" mode=\"ios\">\n            <Route path=\"/\" exact={true} component={Home} />\n            <Route path=\"/login\" exact={true} component={Login} />\n            <Route path=\"/password-request\" exact={true} component={PasswordRequest} />\n            <Route path=\"/change-password\" exact={true} component={ChangePassword} />\n            <Route path=\"/register/:type\" exact={true} component={Register} />\n            <Route path=\"/invite-friend\" exact={true} component={InviteFriend} />\n            <Route path=\"/categories/:id\" exact={true} component={Categories} />\n            <Route path=\"/packs/:type/:id\" exact={true} component={Packs} />\n            <Route path=\"/pack-details/:id/:type\" exact={true} component={PackDetails} />\n            <Route path=\"/add-alarm/:packId/:alarmType\" exact={true} component={AddAlarm} />\n            <Route path=\"/basket\" exact={true} component={Basket} />\n            <Route path=\"/confirm-order\" exact={true} component={ConfirmOrder} />\n            <Route path=\"/orders-list\" exact={true} component={OrdersList} />\n            <Route path=\"/order-details/:id\" exact={true} component={OrderDetails} />\n            <Route path=\"/store-summary\" exact={true} component={StoreSummary} />\n            <Route path=\"/store-packs/:type\" exact={true} component={StorePacks} />\n            <Route path=\"/hints/:id/:type\" exact={true} component={Hints} />\n            <Route path=\"/help/:id\" exact={true} component={Help} />\n            <Route path=\"/notifications\" exact={true} component={Notifications} />\n            <Route path=\"/purchased-packs\" exact={true} component={PurchasedPacks} />\n            <Route path=\"/advert\" exact={true} component={Advert} />\n            <Route path=\"/edit-order/:id\" exact={true} component={EditOrder} />\n            <Route path=\"/friends\" exact={true} component={Friends} />\n          </IonRouterOutlet>\n        </IonSplitPane>\n      </IonReactRouter>\n    </IonApp>\n  );\n};\n\nexport default App;\n\n","/home/ayman/projects/uedokkaneh/src/pages/categories.tsx",["175","176"],"import { useState, useEffect } from 'react'\nimport labels from '../data/labels'\nimport { colors } from '../data/config'\nimport { Category, State } from '../data/types'\nimport {IonButton, IonContent, IonLoading, IonPage} from '@ionic/react'\nimport { useParams } from 'react-router'\nimport Header from './header'\nimport Footer from './footer'\nimport { useSelector } from 'react-redux'\n\ntype Params = {\n  id: string\n} \nconst Categories = () => {\n  const params = useParams<Params>()\n  const stateCategories = useSelector<State, Category[]>(state => state.categories)\n  const [categories, setCategories] = useState<Category[]>([])\n  const [currentCategory] = useState(() => stateCategories.find(c => c.id === params.id))\n  useEffect(() => {\n    setCategories(() => {\n      const categories = stateCategories.filter(c => c.parentId === params.id)\n      return categories.sort((c1, c2) => c1.ordering - c2.ordering)\n    })\n  }, [stateCategories, params.id])\n\n  let i = 0\n  return(\n    <IonPage>\n      <IonLoading isOpen={stateCategories.length === 0} />\n      <Header title={currentCategory?.name} />\n      <IonContent fullscreen>\n        <IonButton \n          routerLink={`/packs/a/${params.id}/0`} \n          expand=\"block\"\n          shape=\"round\"\n          className={colors[i++ % 10].name}\n          style={{margin: '0.9rem'}}\n        >\n          {labels.allProducts}\n        </IonButton>\n        {categories.map(c => \n          <IonButton\n            routerLink={c.isLeaf ? `/packs/c/${c.id}` : `/categories/${c.id}`} \n            expand=\"block\"\n            shape=\"round\"\n            className={colors[i++ % 10].name}\n            style={{margin: '0.9rem'}} \n            key={c.id}\n          >\n            {c.name}\n          </IonButton>\n        )}\n      </IonContent>\n      <Footer />\n    </IonPage>\n  )\n}\n\n\nexport default Categories\n","/home/ayman/projects/uedokkaneh/src/pages/home.tsx",["177","178"],"import { useState, useEffect } from 'react'\nimport labels from '../data/labels'\nimport { Advert, Notification, State } from '../data/types'\nimport { Category } from '../data/types'\nimport { IonBadge, IonButton, IonButtons, IonContent, IonHeader, IonLoading, IonMenuButton, IonPage, IonTitle, IonToolbar } from '@ionic/react'\nimport {colors} from '../data/config'\nimport Footer from './footer'\nimport { useSelector } from 'react-redux'\n\nconst Home = () => {\n  const stateAdverts = useSelector<State, Advert[]>(state => state.adverts)\n  const stateNotifications = useSelector<State, Notification[]>(state => state.notifications)\n  const stateCategories = useSelector<State, Category[]>(state => state.categories)\n  const [advert, setAdvert] = useState<Advert | undefined>(undefined)\n  const [notifications, setNotifications] = useState(0)\n  const [categories, setCategories] = useState<Category[]>([])\n  useEffect(() => {\n    setAdvert(() => stateAdverts.find(a => a.isActive))\n  }, [stateAdverts])\n  useEffect(() => {\n    setNotifications(() => stateNotifications.filter(n => n.status === 'n').length)\n  }, [stateNotifications])\n  useEffect(() => {\n    setCategories(() => {\n      const categories = stateCategories.filter(c => c.parentId === '0')\n      return categories.sort((c1, c2) => c1.ordering - c2.ordering)  \n    })\n  }, [stateCategories])\n  let i = 0\n  return (\n    <IonPage>\n      <IonLoading isOpen={stateCategories.length === 0} />\n      <IonHeader>\n        <IonToolbar>\n          <IonButtons slot=\"start\">\n            <IonMenuButton />\n            {notifications > 0 && \n              <IonBadge className=\"badge\" style={{left: '20px'}}>\n                {notifications}\n              </IonBadge>\n            }\n          </IonButtons>\n          <IonTitle><img src=\"/dokaneh_logo.png\" alt=\"logo\" style={{width: '120px', marginBottom: '-5px'}} /></IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent fullscreen>\n        <IonHeader collapse=\"condense\">\n          <IonToolbar>\n            <IonTitle size=\"large\"><img src=\"/dokaneh_logo.png\" alt=\"logo\" style={{width: '120px', marginBottom: '-15px'}} /></IonTitle>\n          </IonToolbar>\n        </IonHeader>\n        {advert && \n          <IonButton \n            routerLink=\"/advert\" \n            expand=\"block\" \n            shape=\"round\" \n            fill=\"outline\"\n            className=\"advert\"\n          >\n            {advert.title}\n          </IonButton>\n        }\n        <IonButton \n          routerLink=\"/packs/a/0\"\n          expand=\"block\"\n          shape=\"round\"\n          className={colors[i++ % 10].name}\n          style={{margin: '0.9rem'}}\n        >\n          {labels.allProducts}\n        </IonButton>\n        {categories.map(c => \n          <IonButton\n            routerLink={c.isLeaf ? `/packs/n/${c.id}` : `/categories/${c.id}`} \n            expand=\"block\"\n            shape=\"round\"\n            className={colors[i++ % 10].name}\n            style={{margin: '0.9rem'}}\n            key={c.id}\n          >\n            {c.name}\n          </IonButton>\n        )}\n      </IonContent>\n      <Footer />\n    </IonPage>\n  )\n}\n\nexport default Home\n","/home/ayman/projects/uedokkaneh/src/pages/panel.tsx",["179","180"],"import { useState, useEffect, useRef } from 'react'\nimport { logout } from '../data/actions'\nimport labels from '../data/labels'\nimport { IonBadge, IonContent, IonItem, IonLabel, IonList, IonMenu, IonMenuToggle } from '@ionic/react'\nimport { useHistory } from 'react-router'\nimport { useSelector, useDispatch } from 'react-redux'\nimport firebase from '../data/firebase'\nimport { Notification, State } from '../data/types'\n\nconst Panel = () => {\n  const dispatch = useDispatch()\n  const stateUser = useSelector<State, firebase.User | undefined>(state => state.user)\n  const stateNotifications = useSelector<State, Notification[]>(state => state.notifications)\n  const [notifications, setNotifications] = useState(0)\n  const menuEl = useRef<HTMLIonMenuElement | null>(null)\n  const history = useHistory()\n  useEffect(() => {\n    setNotifications(() => stateNotifications.filter(n => n.status === 'n').length)\n  }, [stateNotifications])\n  const handleLogout = () => {\n    logout()\n    dispatch({type: 'LOGOUT'})\n    history.push('/')\n    if (menuEl.current) menuEl.current.close()\n    dispatch({type: 'CLEAR_BASKET'})\n  }\n  return(\n    <IonMenu contentId=\"main\" type=\"overlay\" ref={menuEl} className=\"dark\">\n      <IonContent>\n        <IonList>\n          <IonMenuToggle autoHide={false}>\n            {stateUser ?\n              <>\n                <IonItem href=\"#\" onClick={handleLogout}>\n                  <IonLabel style={{marginBottom: '5px'}}>{labels.logout}</IonLabel>\n                </IonItem>\n                <IonItem routerLink=\"/change-password\" style={{marginBottom: '0px', marginTop: '0px'}}>\n                  <IonLabel>{labels.changePassword}</IonLabel>\n                </IonItem>\n                <IonItem routerLink=\"/notifications\">\n                  <IonLabel>{labels.notifications}</IonLabel>\n                  {notifications > 0 && <IonBadge color=\"danger\">{notifications}</IonBadge>}\n                </IonItem>\n                <IonItem routerLink=\"/packs/0/f\" style={{marginBottom: '0px', marginTop: '0px'}}>\n                  <IonLabel>{labels.favorites}</IonLabel>\n                </IonItem>\n                <IonItem routerLink=\"/orders-list\" style={{marginBottom: '0px', marginTop: '0px'}}>\n                  <IonLabel>{labels.myOrders}</IonLabel>\n                </IonItem>\n                <IonItem routerLink=\"/purchased-packs\" style={{marginBottom: '0px', marginTop: '0px'}}>\n                  <IonLabel>{labels.purchasedPacks}</IonLabel>\n                </IonItem>\n                <IonItem routerLink=\"/friends\" style={{marginBottom: '0px', marginTop: '0px'}}>\n                  <IonLabel>{labels.friends}</IonLabel>\n                </IonItem>\n              </>\n            : <>\n                <IonItem routerLink='/login'>\n                  <IonLabel>{labels.login}</IonLabel>\n                </IonItem>\n                <IonItem routerLink='/register/o'>\n                  <IonLabel>{labels.registerStoreOwner}</IonLabel>\n                </IonItem>\n              </>\n            }\n            {stateUser && stateUser.displayName && \n              <IonItem routerLink='/store-summary'>\n                <IonLabel>{labels.myPacks}</IonLabel>\n              </IonItem>\n            }\n          </IonMenuToggle>\n        </IonList>\n      </IonContent>\n    </IonMenu>\n  )\n}\nexport default Panel\n","/home/ayman/projects/uedokkaneh/src/pages/login.tsx",[],"/home/ayman/projects/uedokkaneh/src/pages/register.tsx",["181","182"],"import { useState, useEffect } from 'react'\nimport { registerUser, getMessage } from '../data/actions'\nimport labels from '../data/labels'\nimport { IonContent, IonFab, IonFabButton, IonIcon, IonInput, IonItem, IonLabel, IonList, IonPage, IonSelect, IonSelectOption, useIonLoading, useIonToast } from '@ionic/react'\nimport Header from './header'\nimport { useHistory, useLocation, useParams } from 'react-router'\nimport { patterns } from '../data/config'\nimport { checkmarkOutline } from 'ionicons/icons'\nimport { useSelector } from 'react-redux'\nimport { Err, Region, State } from '../data/types'\n\ntype Params = {\n  type: string\n}\nconst Register = () => {\n  const params = useParams<Params>()\n  const stateRegions = useSelector<State, Region[]>(state => state.regions)\n  const [name, setName] = useState('')\n  const [mobile, setMobile] = useState('')\n  const [password, setPassword] = useState('')\n  const [storeName, setStoreName] = useState('')\n  const [regionId, setRegionId] = useState('')\n  const [nameInvalid, setNameInvalid] = useState(true)\n  const [passwordInvalid, setPasswordInvalid] = useState(true)\n  const [mobileInvalid, setMobileInvalid] = useState(true)\n  const [regions] = useState(() => [...stateRegions].sort((l1, l2) => l1.ordering - l2.ordering))\n  const history = useHistory()\n  const location = useLocation()\n  const [message] = useIonToast()\n  const [loading, dismiss] = useIonLoading()\n  useEffect(() => {\n    setPasswordInvalid(!password || !patterns.password.test(password))\n  }, [password])\n  useEffect(() => {\n    setNameInvalid(!name || !patterns.name.test(name))\n  }, [name])\n  useEffect(() => {\n    setMobileInvalid(!mobile || !patterns.mobile.test(mobile))\n  }, [mobile])\n\n  const handleRegister = async () => {\n    try{\n      loading()\n      await registerUser(mobile, name, storeName, regionId, password)\n      dismiss()\n      message(labels.registerSuccess, 3000)\n      history.replace('/')\n    } catch (error){\n      dismiss()\n      const err = error as Err\n      message(getMessage(location.pathname, err), 3000)\n    }\n  }\n\n  return (\n    <IonPage>\n      <Header title={labels.newUser} />\n      <IonContent fullscreen className=\"ion-padding\">\n        <IonList>\n          <IonItem>\n            <IonLabel position=\"floating\" color={nameInvalid ? 'danger' : 'primary'}>\n              {labels.name}\n            </IonLabel>\n            <IonInput \n              value={name} \n              type=\"text\" \n              placeholder={labels.namePlaceholder}\n              autofocus\n              clearInput\n              onIonChange={e => setName(e.detail.value!)} \n              color={nameInvalid ? 'danger' : ''}\n            />\n          </IonItem>\n          <IonItem>\n            <IonLabel position=\"floating\" color={mobileInvalid ? 'danger' : 'primary'}>\n              {labels.mobile}\n            </IonLabel>\n            <IonInput \n              value={mobile} \n              type=\"number\" \n              placeholder={labels.mobilePlaceholder}\n              clearInput\n              onIonChange={e => setMobile(e.detail.value!)} \n              color={mobileInvalid ? 'danger' : ''}\n            />\n          </IonItem>\n          <IonItem>\n            <IonLabel position=\"floating\" color={passwordInvalid ? 'danger' : 'primary'}>\n              {labels.password}\n            </IonLabel>\n            <IonInput \n              value={password} \n              type=\"number\" \n              placeholder={labels.passwordPlaceholder}\n              clearInput\n              onIonChange={e => setPassword(e.detail.value!)} \n              color={passwordInvalid ? 'danger' : ''}\n            />\n          </IonItem>\n          {params.type === 'o' &&\n            <IonItem>\n              <IonLabel position=\"floating\" color=\"primary\">\n                {labels.storeName}\n              </IonLabel>\n              <IonInput \n                value={storeName} \n                type=\"text\" \n                clearInput\n                onIonChange={e => setStoreName(e.detail.value!)} \n              />\n            </IonItem>\n          }\n          <IonItem>\n            <IonLabel position=\"floating\" color=\"primary\">{labels.region}</IonLabel>\n            <IonSelect \n              ok-text={labels.ok} \n              cancel-text={labels.cancel} \n              value={regionId}\n              onIonChange={e => setRegionId(e.detail.value)}\n            >\n              {regions.map(r => <IonSelectOption key={r.id} value={r.id}>{r.name}</IonSelectOption>)}\n            </IonSelect>\n          </IonItem>\n        </IonList>\n      </IonContent>\n      {regionId && (params.type === 'n' || storeName) && !nameInvalid && !mobileInvalid && !passwordInvalid &&\n        <IonFab vertical=\"top\" horizontal=\"end\" slot=\"fixed\">\n          <IonFabButton onClick={handleRegister} color=\"success\">\n            <IonIcon ios={checkmarkOutline} /> \n          </IonFabButton>\n        </IonFab>\n      }\n    </IonPage>\n  )\n}\nexport default Register\n","/home/ayman/projects/uedokkaneh/src/pages/pack-details.tsx",["183","184"],"import { useEffect, useState } from 'react'\nimport RatingStars from './rating-stars'\nimport { addAlarm, getMessage, updateFavorites, productOfText, notifyFriends } from '../data/actions'\nimport labels from '../data/labels'\nimport { setup, colors } from '../data/config'\nimport { BasketPack, CustomerInfo, Err, Order, Pack, PackPrice, State, UserInfo } from '../data/types'\nimport { IonActionSheet, IonButton, IonCard, IonCol, IonContent, IonFab, IonFabButton, IonGrid, IonIcon, IonImg, IonPage, IonRow, useIonAlert, useIonToast } from '@ionic/react'\nimport Header from './header'\nimport Footer from './footer'\nimport { useHistory, useLocation, useParams } from 'react-router'\nimport { menuOutline } from 'ionicons/icons'\nimport { useSelector, useDispatch } from 'react-redux'\nimport firebase from '../data/firebase'\n\ntype Params = {\n  id: string,\n  type: string\n}\nconst PackDetails = () => {\n  const dispatch = useDispatch()\n  const params = useParams<Params>()\n  const stateUser = useSelector<State, firebase.User | undefined>(state => state.user)\n  const statePacks = useSelector<State, Pack[]>(state => state.packs)\n  const statePackPrices = useSelector<State, PackPrice[]>(state => state.packPrices)\n  const stateCustomerInfo = useSelector<State, CustomerInfo | undefined>(state => state.customerInfo)\n  const stateUserInfo = useSelector<State, UserInfo | undefined>(state => state.userInfo)\n  const stateBasket = useSelector<State, BasketPack[]>(state => state.basket)\n  const stateOrders = useSelector<State, Order[]>(state => state.orders)\n  const [pack] = useState(() => statePacks.find(p => p.id === params.id))\n  const [isAvailable, setIsAvailable] = useState(-1)\n  const [subPackInfo, setSubPackInfo] = useState('')\n  const [bonusPackInfo, setBonusPackInfo] = useState('')\n  const [otherProducts, setOtherProducts] = useState<Pack[]>([])\n  const [otherOffers, setOtherOffers] = useState<Pack[]>([])\n  const [otherPacks, setOtherPacks] = useState<Pack[]>([])\n  const [packActionOpened, setPackActionOpened] = useState(false)\n  const [offerActionOpened, setOfferActionOpened] = useState(false)\n  const history = useHistory()\n  const location = useLocation()\n  const [message] = useIonToast()\n  const [alert] = useIonAlert()\n  useEffect(() => {\n    setIsAvailable(() => statePackPrices.find(p => p.storeId === stateCustomerInfo?.storeId && p.packId === pack?.id) ? 1 : -1)\n  }, [statePackPrices, stateCustomerInfo, pack])\n  useEffect(() => {\n    setSubPackInfo(() => {\n      if (pack?.subPackId) {\n        const price = Math.round(pack.price / (pack?.subQuantity ?? 0) * (pack?.subPercent ?? 0) * (1 + setup.profit))\n        return `${pack.productName} ${pack?.subPackName}(${(price / 100).toFixed(2)})`\n      } else {\n        return ''\n      }  \n    })\n    setBonusPackInfo(() => {\n      if (pack?.bonusPackId) {\n        const price = Math.round(pack.price / (pack.bonusQuantity ?? 0) * (pack.bonusPercent ?? 0) * (1 + setup.profit))\n        return `${pack?.bonusProductName} ${pack.bonusPackName}(${(price / 100).toFixed(2)})`\n      } else {\n        return ''\n      }  \n    })\n    setOtherProducts(() => statePacks.filter(pa => pa.categoryId === pack?.categoryId && (pa.sales > pack.sales || pa.rating > pack.rating)))\n    setOtherOffers(() => statePacks.filter(pa => pa.productId === pack?.productId && pa.id !== pack.id && (pa.isOffer || pa.offerEnd)))\n    setOtherPacks(() => statePacks.filter(pa => pa.productId === pack?.productId && pa.weightedPrice < pack.weightedPrice))\n  }, [pack, statePacks])\n  const addToBasket = (packId?: string) => {\n    try{\n      if (stateCustomerInfo?.isBlocked) {\n        throw new Error('blockedUser')\n      }\n      if (stateBasket.find(p => p.packId === packId)) {\n        throw new Error('alreadyInBasket')\n      }\n      let foundPack = statePacks.find(p => p.id === params.id)\n      let price = pack?.price ?? 0\n      let maxQuantity\n      if (packId !== pack?.id) {\n        foundPack = statePacks.find(p => p.id === packId)\n        if (packId === pack?.subPackId) {\n          price = Math.round((pack?.price ?? 0) / (pack?.subQuantity ?? 0) * (pack?.subPercent ?? 0) * (1 + setup.profit))\n          maxQuantity = (pack?.subQuantity ?? 0) - 1\n          if (pack?.bonusPackId) maxQuantity++\n        } else  {\n          price = Math.round((pack?.price ?? 0) / (pack?.bonusQuantity ?? 0) * (pack?.bonusPercent ?? 0) * (1 + setup.profit))\n          maxQuantity = pack?.bonusQuantity ?? 0\n        }\n      }\n      const purchasedPack = {\n        ...foundPack,\n        price,\n        maxQuantity,\n        offerId: pack?.id\n      }\n      const orderLimit = stateCustomerInfo?.orderLimit || setup.orderLimit\n      const activeOrders = stateOrders.filter(o => ['n', 'a', 'e', 'f', 'p'].includes(o.status))\n      const activeOrdersTotal = activeOrders.reduce((sum, o) => sum + o.total, 0)\n      if (activeOrdersTotal + purchasedPack.price > orderLimit) {\n        throw new Error('limitOverFlow')\n      }\n      dispatch({type: 'ADD_TO_BASKET', payload: purchasedPack})\n      message(labels.addToBasketSuccess, 3000)\n      history.goBack()\n\t\t} catch (error){\n      const err = error as Err\n      message(getMessage(location.pathname, err), 3000)\n    }\n  }\n  const confirmAddAlarm = (alarmTypeId: string) => {\n    try{\n      if (stateCustomerInfo?.isBlocked) {\n        throw new Error('blockedUser')\n      }\n      if (stateUserInfo?.alarms?.find(a => a.packId === params.id && a.status === 'n')){\n        throw new Error('duplicateAlarms')\n      }\n      const alarm = {\n        packId: params.id,\n        type: alarmTypeId,\n        status: 'n'\n      }\n      addAlarm(alarm)\n      message(labels.sendSuccess, 3000)\n      history.goBack()\n    } catch(error) {\n      const err = error as Err\n      message(getMessage(location.pathname, err), 3000)\n    }\n  }\n  const handleAddAlarm = (alarmTypeId: string) => {\n    try {\n      if (alarmTypeId === 'ua') {\n        alert({\n          header: labels.confirmationTitle,\n          message: labels.confirmationText,\n          buttons: [\n            {text: labels.cancel},\n            {text: labels.yes, handler: () => confirmAddAlarm(alarmTypeId)},\n          ],\n        })\n      } else {\n        if (stateCustomerInfo?.isBlocked) {\n          throw new Error('blockedUser')\n        }\n        if (stateUserInfo?.alarms?.find(a => a.packId === params.id && a.status === 'n')){\n          throw new Error('duplicateAlarms')\n        }\n        history.push(`/add-alarm/${params.id}/${alarmTypeId}`)\n      }  \n    } catch(error) {\n      const err = error as Err\n      message(getMessage(location.pathname, err), 3000)\n    }\n  }\n  const handleFavorite = () => {\n    try{\n      if (stateUserInfo && pack) {\n        updateFavorites(stateUserInfo, pack.productId)\n        message(stateUserInfo?.favorites?.includes(pack?.productId) ? labels.removeFavoriteSuccess : labels.addFavoriteSuccess, 3000)\n      }\n\t\t} catch (error){\n      const err = error as Err\n      message(getMessage(location.pathname, err), 3000)\n    }\n  }\n  const handleNotifyFriends = () => {\n    try{\n      if (stateCustomerInfo?.isBlocked) {\n        throw new Error('blockedUser')\n      }\n      if (pack) {\n        notifyFriends(pack.id)\n        message(labels.sendSuccess, 3000)\n      }\n    } catch(error) {\n      const err = error as Err\n      message(getMessage(location.pathname, err), 3000)\n    }\n  }\n  let i = 0\n  return (\n    <IonPage>\n      <Header title={`${pack?.productName}${pack?.productAlias ? '-' + pack?.productAlias : ''}`} />\n      <IonContent fullscreen>\n        <IonCard>\n          <IonGrid>\n            <IonRow>\n              <IonCol className=\"price\">{((pack?.price ?? 0) / 100).toFixed(2)}</IonCol>\n            </IonRow>\n            <IonRow>\n              <IonCol className=\"card-title\">\n                {`${pack?.name} ${pack?.closeExpired ? '(' + labels.closeExpired + ')' : ''}`}\n              </IonCol>\n            </IonRow>\n            <IonRow>\n              <IonCol>\n                <IonImg src={pack?.imageUrl} alt={labels.noImage} />\n              </IonCol>\n            </IonRow>\n            <IonRow>\n              <IonCol style={{textAlign: 'center'}}>\n                {pack?.productDescription}\n              </IonCol>\n            </IonRow>\n            <IonRow>\n              <IonCol>{productOfText(pack?.trademark ?? '', pack?.country ?? '')}</IonCol>\n              <IonCol className=\"ion-text-end\"><RatingStars rating={pack?.rating ?? 0} count={pack?.ratingCount ?? 0} /></IonCol>\n            </IonRow>\n          </IonGrid>\n        </IonCard>\n      </IonContent>\n      {params.type === 'c' && \n        <div className=\"ion-text-center\">\n          <IonButton \n            fill=\"solid\" \n            shape=\"round\"\n            color=\"secondary\"\n            style={{width: '10rem'}}\n            onClick={() => pack?.isOffer ? setOfferActionOpened(true) : addToBasket(pack?.id)}\n          >\n            {`${labels.addToBasket}${pack?.isOffer ? '*' : ''}`}\n          </IonButton>\n        </div>\n      }\n      {stateUser &&\n        <IonFab vertical=\"top\" horizontal=\"end\" slot=\"fixed\">\n          <IonFabButton onClick={() => setPackActionOpened(true)} color=\"success\">\n            <IonIcon ios={menuOutline} />\n          </IonFabButton>\n        </IonFab>\n      }\n      {params.type === 'c' && pack?.isOffer ? <p className=\"note\">{labels.offerHint}</p> : ''}\n      <IonActionSheet\n        isOpen={packActionOpened}\n        onDidDismiss={() => setPackActionOpened(false)}\n        buttons={[\n          {\n            text: pack?.productId && stateUserInfo?.favorites?.includes(pack.productId) ? labels.removeFromFavorites : labels.addToFavorites,\n            cssClass: params.type === 'c' ? colors[i++ % 10].name : 'ion-hide',\n            handler: () => handleFavorite()\n          },\n          {\n            text: labels.notifyFriends,\n            cssClass: params.type === 'c' && pack?.isOffer && stateUserInfo?.friends?.find(f => f.status === 'r') ? colors[i++ % 10].name : 'ion-hide',\n            handler: () => handleNotifyFriends()\n          },\n          {\n            text: labels.otherProducts,\n            cssClass: params.type === 'c' && otherProducts.length > 0 ? colors[i++ % 10].name : 'ion-hide',\n            handler: () => history.push(`/hints/${pack?.id}/p`)\n          },\n          {\n            text: labels.otherOffers,\n            cssClass: params.type === 'c' && otherOffers.length > 0 ? colors[i++ % 10].name : 'ion-hide',\n            handler: () => history.push(`/hints/${pack?.id}/o`)\n          },\n          {\n            text: labels.otherPacks,\n            cssClass: params.type === 'c' && otherPacks.length > 0 ? colors[i++ % 10].name : 'ion-hide',\n            handler: () => history.push(`/hints/${pack?.id}/w`)\n          },\n          {\n            text: labels.changePrice,\n            cssClass: params.type === 'o' && isAvailable === 1 ? colors[i++ % 10].name : 'ion-hide',\n            handler: () => handleAddAlarm('cp')\n          },\n          {\n            text: labels.packAvailable,\n            cssClass: params.type === 'o' && isAvailable === -1 ? colors[i++ % 10].name : 'ion-hide',\n            handler: () => handleAddAlarm('av')\n          },\n          {\n            text: labels.packUnAvailable,\n            cssClass: params.type === 'o' && isAvailable === 1 ? colors[i++ % 10].name : 'ion-hide',\n            handler: () => handleAddAlarm('ua')\n          },\n          {\n            text: labels.AlternativeAvailable,\n            cssClass: params.type === 'o' ? colors[i++ % 10].name : 'ion-hide',\n            handler: () => handleAddAlarm('aa')\n          },\n          {\n            text: labels.closedExpireOffer,\n            cssClass: params.type === 'o' ? colors[i++ % 10].name : 'ion-hide',\n            handler: () => handleAddAlarm('eo')\n          },\n          {\n            text: labels.groupOffer,\n            cssClass: params.type === 'o' ? colors[i++ % 10].name : 'ion-hide',\n            handler: () => handleAddAlarm('go')\n          },\n        ]}\n      />\n      <IonActionSheet\n        isOpen={offerActionOpened}\n        onDidDismiss={() => setOfferActionOpened(false)}\n        buttons={[\n          {\n            text: labels.allOffer,\n            cssClass: 'good',\n            handler: () => addToBasket(pack?.id)\n          },\n          {\n            text: subPackInfo,\n            cssClass: 'medium',\n            handler: () => addToBasket(pack?.subPackId)\n          },\n          {\n            text: bonusPackInfo,\n            cssClass: pack?.bonusPackId ? 'bad' : 'ion-hide',\n            handler: () => addToBasket(pack?.bonusPackId)\n          },\n        ]}\n      />\n      <Footer />\n    </IonPage>\n  )\n}\n\nexport default PackDetails\n","/home/ayman/projects/uedokkaneh/src/pages/basket.tsx",["185","186"],"import { useEffect, useState } from 'react'\nimport { getMessage, quantityText, getBasket } from '../data/actions'\nimport labels from '../data/labels'\nimport { colors, setup } from '../data/config'\nimport { BasketPack, BigBasketPack, CustomerInfo, Order, Pack, State } from '../data/types'\nimport { IonBadge, IonButton, IonButtons, IonContent, IonIcon, IonImg, IonItem, IonLabel, IonList, IonPage, IonText, IonThumbnail, useIonToast } from '@ionic/react'\nimport Header from './header'\nimport { useHistory, useLocation } from 'react-router'\nimport { addOutline, removeOutline } from 'ionicons/icons'\nimport { useSelector, useDispatch } from 'react-redux'\n\nconst Basket = () => {\n  const dispatch = useDispatch()\n  const stateOrders = useSelector<State, Order[]>(state => state.orders)\n  const statePacks = useSelector<State, Pack[]>(state => state.packs)\n  const stateBasket = useSelector<State, BasketPack[]>(state => state.basket)\n  const stateCustomerInfo = useSelector<State, CustomerInfo | undefined>(state => state.customerInfo)\n  const [submitVisible, setSubmitVisible] = useState(true)\n  const [basket, setBasket] = useState<BigBasketPack[]>([])\n  const [totalPrice, setTotalPrice] = useState(0)\n  const [weightedPacks, setWeightedPacks] = useState<BigBasketPack[]>([])\n  const history = useHistory()\n  const location = useLocation()\n  const [message] = useIonToast()\n  const [customerOrdersTotals] = useState(() => {\n    const activeOrders = stateOrders.filter(o => ['n', 'a', 'e', 'f', 'p'].includes(o.status))\n    return activeOrders.reduce((sum, o) => sum + o.total, 0)\n  })\n  useEffect(() => {\n    if (stateBasket.length === 0) history.push('/home')\n    else setBasket(getBasket(stateBasket, statePacks))\n  }, [stateBasket, statePacks, history])\n  useEffect(() => {\n    setTotalPrice(() => basket.reduce((sum, p) => sum + Math.round(p.price * p.quantity), 0))\n    setWeightedPacks(() => basket.filter(p => p.byWeight))\n  }, [basket])\n  useEffect(() => {\n    const orderLimit = stateCustomerInfo?.orderLimit ?? setup.orderLimit\n    if (customerOrdersTotals + totalPrice > orderLimit){\n      setSubmitVisible(false)\n    } else {\n      setSubmitVisible(true)\n    }\n  }, [stateCustomerInfo, customerOrdersTotals, totalPrice])\n\n  const handleConfirm = () => {\n    try{\n      if (stateCustomerInfo?.isBlocked) {\n        throw new Error('blockedUser')\n      }\n      history.push('/confirm-order')\n    } catch(err) {\n\t\t\tmessage(getMessage(location.pathname, err), 3000)\n\t\t}\n  }\n  const handleIncrease = (pack: BigBasketPack) => {\n    try{\n      dispatch({type: 'INCREASE_QUANTITY', payload: pack})\n      const orderLimit = stateCustomerInfo?.orderLimit ?? setup.orderLimit\n      if (customerOrdersTotals + totalPrice > orderLimit){\n        throw new Error('limitOverFlow')\n      }  \n    } catch(err) {\n\t\t\tmessage(getMessage(location.pathname, err), 3000)\n\t\t}\n  }\n  return(\n    <IonPage>\n      <Header title={labels.basket} />\n      <IonContent fullscreen>\n        <IonList className=\"ion-padding\">\n          {basket.length === 0 ?\n            <IonItem> \n              <IonLabel>{labels.noData}</IonLabel>\n            </IonItem>\n          : basket.map(p => \n            <IonItem key={p.packId}>\n              <IonThumbnail slot=\"start\">\n                <IonImg src={p.imageUrl} alt={labels.noImage} />\n              </IonThumbnail>\n              <IonLabel>\n                <IonText style={{color: colors[0].name}}>{p.productName}</IonText>\n                <IonText style={{color: colors[1].name}}>{p.productAlias}</IonText>\n                <IonText style={{color: colors[2].name}}>{p.packName}</IonText>\n                <IonText style={{color: colors[3].name}}>{p.priceText}</IonText>\n                <IonText style={{color: colors[4].name}}>{`${labels.quantity}: ${quantityText(p.quantity)}`}</IonText>\n                <IonText style={{color: colors[5].name}}>{`${labels.totalPrice}:${p.totalPriceText}`}</IonText>\n                {p.closeExpired && <IonBadge color=\"danger\">{labels.closeExpired}</IonBadge>}\n              </IonLabel>\n              {p.price > 0 && <>\n                <IonButtons slot=\"end\" onClick={() => dispatch({type: 'DECREASE_QUANTITY', payload: p})}>\n                  <IonIcon \n                    ios={removeOutline} \n                    color=\"primary\" \n                    style={{fontSize: '25px', marginRight: '5px'}} \n                  />\n                </IonButtons>\n                <IonButtons slot=\"end\" onClick={() => handleIncrease(p)}>\n                  <IonIcon \n                    ios={addOutline} \n                    color=\"primary\" \n                    style={{fontSize: '25px', marginRight: '5px'}} \n                  />\n                </IonButtons>\n              </>}\n            </IonItem>    \n          )}\n        </IonList>\n        <p className=\"note\">{weightedPacks.length > 0 ? labels.weightedPricesNote : ''}</p>\n      </IonContent>\n      {submitVisible ? \n        <div className=\"ion-text-center\">\n          <IonButton \n            fill=\"solid\" \n            shape=\"round\"\n            color=\"secondary\"\n            style={{width: '10rem'}}\n            onClick={handleConfirm}\n          >\n            {`${labels.submit} ${(totalPrice / 100).toFixed(2)}`}\n          </IonButton>\n        </div>\n      : \n        <div className=\"ion-text-center\">\n          <IonButton \n            fill=\"solid\" \n            shape=\"round\"\n            color=\"danger\"\n            style={{width: '10rem'}}\n            onClick={() => history.push('/help/ol')}\n          >\n            {labels.limitOverFlowNote}\n          </IonButton>\n        </div>\n      }\n    </IonPage>\n  )\n}\nexport default Basket\n","/home/ayman/projects/uedokkaneh/src/pages/packs.tsx",["187","188"],"import { useState, useEffect } from 'react'\nimport labels from '../data/labels'\nimport { sortByList, colors } from '../data/config'\nimport { getChildren, productOfText } from '../data/actions'\nimport { Category, Pack, State, UserInfo } from '../data/types'\nimport { IonActionSheet, IonBadge, IonContent, IonImg, IonItem, IonLabel, IonList, IonPage, IonSelect, IonSelectOption, IonText, IonThumbnail } from '@ionic/react'\nimport Header from './header'\nimport Footer from './footer'\nimport { useParams } from 'react-router'\nimport { useSelector } from 'react-redux'\n\ntype Params = {\n  id: string,\n  type: string\n}\nconst Packs = () => {\n  const params = useParams<Params>()\n  const statePacks = useSelector<State, Pack[]>(state => state.packs)\n  const stateCategories = useSelector<State, Category[]>(state => state.categories)\n  const stateUserInfo = useSelector<State, UserInfo | undefined>(state => state.userInfo)\n  const [packs, setPacks] = useState<Pack[]>([])\n  const [category] = useState(() => stateCategories.find(category => category.id === params.id))\n  const [sortBy, setSortBy] = useState('v')\n  const [actionOpened, setActionOpened] = useState(false)\n  useEffect(() => {\n    setPacks(() => {\n      const children = params.type === 'a' ? getChildren(params.id, stateCategories) : [params.id]\n      const packs = statePacks.filter(p => !params.id || (params.type === 'f' && stateUserInfo?.favorites?.includes(p.productId)) || children.includes(p.categoryId))\n      return packs.sort((p1, p2) => p1.weightedPrice - p2.weightedPrice)\n    })\n  }, [statePacks, stateUserInfo, params.id, params.type, stateCategories])\n  const handleSorting = (sortByValue: string) => {\n    setSortBy(sortByValue)\n    switch(sortByValue){\n      case 'p':\n        setPacks([...packs].sort((p1, p2) => p1.price - p2.price))\n        break\n      case 's':\n        setPacks([...packs].sort((p1, p2) => p2.sales - p1.sales))\n        break\n      case 'r':\n        setPacks([...packs].sort((p1, p2) => p2.rating - p1.rating))\n        break\n      case 'o':\n        setPacks([...packs].sort((p1, p2) => (p2.isOffer || p2.offerEnd ? 1 : 0) - (p1.isOffer || p1.offerEnd ? 1 : 0)))\n        break\n      case 'v':\n        setPacks([...packs].sort((p1, p2) => p1.weightedPrice - p2.weightedPrice))\n        break\n      default:\n    }\n  }\n  let i = 0\n  return(\n    <IonPage>\n      <Header title={category?.name || (params.type === 'f' ? labels.favorites : labels.allProducts)} />\n      <IonContent fullscreen>\n        <IonList className=\"ion-padding\">\n          {packs.length > 1 &&\n            <IonItem>\n              <IonLabel position=\"floating\" color=\"primary\">{labels.sortBy}</IonLabel>\n              <IonSelect \n                ok-text={labels.ok} \n                cancel-text={labels.cancel} \n                value={sortBy}\n                onIonChange={e => setSortBy(e.detail.value)}\n              >\n                {sortByList.map(s => <IonSelectOption key={s.id} value={s.id}>{s.name}</IonSelectOption>)}\n              </IonSelect>\n            </IonItem>\n          }\n          {packs.length === 0 ?\n            <IonItem> \n              <IonLabel>{labels.noData}</IonLabel>\n            </IonItem>\n          : packs.map(p => \n              <IonItem key={p.id} routerLink={`/pack-details/${p.id}/c`}>\n                <IonThumbnail slot=\"start\">\n                  <IonImg src={p.imageUrl} alt={labels.noImage} />\n                </IonThumbnail>\n                <IonLabel>\n                  <IonText style={{color: colors[0].name}}>{p.productName}</IonText>\n                  <IonText style={{color: colors[1].name}}>{p.productAlias}</IonText>\n                  <IonText style={{color: colors[2].name}}>{p.name}</IonText>\n                  <IonText style={{color: colors[3].name}}>{p.productDescription}</IonText>\n                  <IonText style={{color: colors[4].name}}>{productOfText(p.trademark, p.country)}</IonText>\n                  <IonText style={{color: colors[5].name}}>{`${labels.category}: ${stateCategories.find(c => c.id === p.categoryId)?.name}`}</IonText>\n                  {p.closeExpired && <IonBadge color=\"danger\">{labels.closeExpired}</IonBadge>}\n                </IonLabel>\n                <IonLabel slot=\"end\" className=\"price\">{p.isOffer || p.offerEnd ? '' : (p.price / 100).toFixed(2)}</IonLabel>\n                {(p.isOffer || p.offerEnd) && <IonBadge slot=\"end\" color=\"success\">{(p.price / 100).toFixed(2)}</IonBadge>}\n              </IonItem>\n            )\n          }\n        </IonList>\n      </IonContent>\n      <IonActionSheet\n        isOpen={actionOpened}\n        onDidDismiss={() => setActionOpened(false)}\n        buttons={\n          sortByList.map(o => \n            o.id === sortBy ? ''\n            : {\n              text: o.name,\n              cssClass: colors[i++ % 10].name,\n              handler: () => handleSorting(o.id)\n            }\n          )\n        }\n      />\n      <Footer />\n    </IonPage>\n  )\n}\n\nexport default Packs","/home/ayman/projects/uedokkaneh/src/pages/confirm-order.tsx",["189","190"],"import { useState, useEffect } from 'react'\nimport { confirmOrder, getMessage, quantityText, getBasket } from '../data/actions'\nimport labels from '../data/labels'\nimport { setup, colors } from '../data/config'\nimport { BasketPack, Discount, BigBasketPack, State, Region, CustomerInfo, UserInfo, Pack, Advert, Order, Err } from '../data/types'\nimport { useHistory, useLocation } from 'react-router'\nimport { IonBadge, IonButton, IonContent, IonItem, IonLabel, IonList, IonPage, IonText, useIonToast } from '@ionic/react'\nimport Header from './header'\nimport { Link } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport firebase from '../data/firebase'\n\nconst ConfirmOrder = () => {\n  const dispatch = useDispatch()\n  const stateUser = useSelector<State, firebase.User | undefined>(state => state.user)\n  const stateRegions = useSelector<State, Region[]>(state => state.regions)\n  const stateCustomerInfo = useSelector<State, CustomerInfo | undefined>(state => state.customerInfo)\n  const stateUserInfo = useSelector<State, UserInfo | undefined>(state => state.userInfo)\n  const stateBasket = useSelector<State, BasketPack[]>(state => state.basket)\n  const statePacks = useSelector<State, Pack[]>(state => state.packs)\n  const stateOrders = useSelector<State, Order[]>(state => state.orders)\n  const stateAdverts = useSelector<State, Advert[]>(state => state.adverts)\n  const [basket, setBasket] = useState<BigBasketPack[]>([])\n  const [total, setTotal] = useState(0)\n  const [fixedFees, setFixedFees] = useState(0)\n  const [fraction, setFraction] = useState(0)\n  const [discount, setDiscount] = useState<Discount>()\n  const [weightedPacks, setWeightedPacks] = useState<BasketPack[]>([])\n  const [regionFees] = useState(() => stateRegions.find(r => r.id === stateUserInfo?.regionId)?.fees ?? 0)\n  const [deliveryFees] = useState(stateCustomerInfo?.deliveryFees ?? regionFees)\n  const history = useHistory()\n  const location = useLocation()\n  const [message] = useIonToast()\n\n  useEffect(() => {\n    setBasket(getBasket(stateBasket, statePacks))\n  }, [stateBasket, statePacks])\n\n  useEffect(() => {\n    setTotal(() => basket.reduce((sum, p) => sum + Math.round(p.price * p.quantity), 0))\n    setWeightedPacks(() => basket.filter(p => p.byWeight))\n  }, [basket])\n  useEffect(() => {\n    setFixedFees(() => Math.round(setup.fixedFees * total))\n  }, [total])\n  useEffect(() => {\n    setFraction((total + fixedFees) - Math.floor((total + fixedFees) / 5) * 5)\n  }, [total, fixedFees])\n  useEffect(() => {\n    setDiscount(() => {\n      const orders = stateOrders.filter(o => o.status !== 'c')\n      let discount = {\n        value: 0,\n        type: 'n'\n      }\n      if (orders.length === 0) {\n        discount.value = setup.firstOrderDiscount\n        discount.type = 'f'\n      } else if ((stateCustomerInfo?.discounts || 0) > 0) {\n        discount.value = Math.min(stateCustomerInfo?.discounts || 0, setup.maxDiscount)\n        discount.type = 'o'\n      } else if ((stateCustomerInfo?.specialDiscount || 0) > 0) {\n        discount.value = stateCustomerInfo?.specialDiscount || 0\n        discount.type = 's'\n      }\n      return discount\n    }) \n  }, [stateOrders, stateCustomerInfo])\n\n  const handleConfirm = () => {\n    try{\n      if (stateAdverts[0]?.type === 'n') {\n        message(stateAdverts[0].text, 2000)\n        return\n      }\n      if (stateCustomerInfo?.isBlocked) {\n        throw new Error('blockedUser')\n      }\n      const orderLimit = stateCustomerInfo?.orderLimit || setup.orderLimit\n      const activeOrders = stateOrders.filter(o => ['n', 'a', 'e', 'f', 'p'].includes(o.status))\n      const totalOrders = activeOrders.reduce((sum, o) => sum + o.total, 0)\n      if (totalOrders + total > orderLimit) {\n        throw new Error('limitOverFlow')\n      }\n      const packs = basket.filter(p => p.price > 0)\n      const newPacks = packs.map(p => {\n        return {\n          packId: p.packId,\n          productId: p.productId,\n          productName: p.productName,\n          productAlias: p.productAlias,\n          packName: p.packName,\n          imageUrl: p.imageUrl,\n          price: p.price,\n          quantity: p.quantity,\n          closeExpired: p.closeExpired,\n          byWeight: p.byWeight,\n          gross: Math.round(p.price * p.quantity),\n          offerId: p.offerId || '',\n          purchased: 0,\n          status: 'n'\n        }\n      })\n      const order = {\n        status: 'n',\n        basket: newPacks,\n        fixedFees,\n        deliveryFees,\n        discount,\n        total,\n        fraction\n      }\n      confirmOrder(order)\n      message(labels.sendSuccess, 3000)\n      history.push('/')\n      dispatch({ type: 'CLEAR_BASKET'})\n    } catch (error){\n      const err = error as Err\n      message(getMessage(location.pathname, err), 3000)\n    }\n  }\n  if (!stateUser) return <IonPage><h3 className=\"center\"><a href=\"/login\">{labels.relogin}</a></h3></IonPage>\n  return (\n    <IonPage>\n      <Header title={labels.sendOrder} />\n      <IonContent fullscreen>\n        <p className=\"note\">{labels.orderHelp} <Link to=\"/help/o\">{labels.clickHere}</Link></p>\n        {regionFees === 0 ? <p className=\"note\">{labels.noDelivery}</p> : ''}\n        <IonList className=\"ion-padding\">\n          {basket.map(p => \n            <IonItem key={p.packId}>\n              <IonLabel>\n                <IonText style={{color: colors[0].name}}>{p.productName}</IonText>\n                <IonText style={{color: colors[1].name}}>{p.productAlias}</IonText>\n                <IonText style={{color: colors[2].name}}>{p.packName}</IonText>\n                <IonText style={{color: colors[3].name}}>{p.priceText}</IonText>\n                <IonText style={{color: colors[4].name}}>{`${labels.quantity}: ${quantityText(p.quantity)}`}</IonText>\n                {p.closeExpired && <IonBadge color=\"danger\">{labels.closeExpired}</IonBadge>}\n              </IonLabel>\n              <IonLabel slot=\"end\" className=\"price\">{p.totalPriceText}</IonLabel>\n            </IonItem>    \n          )}\n          <IonItem>\n            <IonLabel>\n              <IonText style={{color: colors[0].name}}>{labels.total}</IonText>\n            </IonLabel>\n            <IonLabel slot=\"end\" className=\"price\">{(total / 100).toFixed(2)}</IonLabel>\n          </IonItem>    \n          <IonItem>\n            <IonLabel>\n              <IonText style={{color: colors[1].name}}>{labels.fixedFees}</IonText>\n            </IonLabel>\n            <IonLabel slot=\"end\" className=\"price\">{((fixedFees + deliveryFees) / 100).toFixed(2)}</IonLabel>\n          </IonItem>    \n          <IonItem>\n            <IonLabel>\n              <IonText style={{color: colors[2].name}}>{labels.discount}</IonText>\n            </IonLabel>\n            <IonLabel slot=\"end\" className=\"price\">{(((discount?.value ?? 0) + fraction) / 100).toFixed(2)}</IonLabel>\n          </IonItem>    \n          <IonItem>\n            <IonLabel>\n              <IonText style={{color: colors[3].name}}>{labels.net}</IonText>\n            </IonLabel>\n            <IonLabel slot=\"end\" className=\"price\">{((total + fixedFees + deliveryFees - (discount?.value ?? 0) - fraction) / 100).toFixed(2)}</IonLabel>\n          </IonItem>    \n        </IonList>\n        <p className=\"note\">{weightedPacks.length > 0 ? labels.weightedPricesNote : ''}</p>\n      </IonContent>\n      <div className=\"ion-text-center\">\n        <IonButton \n          fill=\"solid\" \n          shape=\"round\"\n          color=\"secondary\"\n          style={{width: '10rem'}}\n          onClick={handleConfirm}\n        >\n          {labels.send}\n        </IonButton>\n      </div>\n    </IonPage>\n  )\n}\nexport default ConfirmOrder\n","/home/ayman/projects/uedokkaneh/src/pages/add-alarm.tsx",[],"/home/ayman/projects/uedokkaneh/src/pages/orders-list.tsx",["191","192"],"import { useState, useEffect } from 'react'\nimport moment from 'moment'\nimport 'moment/locale/ar'\nimport labels from '../data/labels'\nimport { colors, orderStatus } from '../data/config'\nimport { Order, State } from '../data/types'\nimport { IonContent, IonItem, IonLabel, IonList, IonPage, IonText } from '@ionic/react'\nimport Header from './header'\nimport Footer from './footer'\nimport { useSelector } from 'react-redux'\n\nconst OrdersList = () => {\n  const stateOrders = useSelector<State, Order[]>(state => state.orders)\n  const [orders, setOrders] = useState<Order[]>([])\n  useEffect(() => {\n    setOrders(() => {\n      const orders = stateOrders.filter(o => ['n', 'a', 'e', 'u', 'f', 'p', 'd'].includes(o.status))\n      return orders.sort((o1, o2) => o2.time! > o1.time! ? -1 : 1)\n    })\n  }, [stateOrders])\n  return(\n    <IonPage>\n      <Header title={labels.myOrders} />\n      <IonContent fullscreen>\n        <IonList>\n          {orders.length === 0 ? \n            <IonItem> \n              <IonLabel>{labels.noData}</IonLabel>\n            </IonItem>\n          : orders.map(o =>\n              <IonItem key={o.id} routerLink={`/order-details/${o.id}`}>\n                <IonLabel>\n                  <IonText style={{color: colors[0].name}}>{orderStatus.find(s => s.id === o.status)?.name}</IonText>\n                  <IonText style={{color: colors[1].name}}>{moment(o.time).fromNow()}</IonText>\n                  <IonText style={{color: colors[2].name}}>{(o.total / 100).toFixed(2)}</IonText>\n                </IonLabel>\n              </IonItem>    \n            )\n          }\n        </IonList>\n      </IonContent>\n      <Footer />\n    </IonPage>\n  )\n}\n\nexport default OrdersList\n","/home/ayman/projects/uedokkaneh/src/pages/order-details.tsx",["193","194"],"import { useState, useEffect } from 'react'\nimport { cancelOrder, mergeOrders, addOrderRequest, getMessage, quantityDetails } from '../data/actions'\nimport labels from '../data/labels'\nimport { colors, orderPackStatus } from '../data/config'\nimport { CustomerInfo, Err, Order, OrderPack, Pack, State } from '../data/types'\nimport { useHistory, useLocation, useParams } from 'react-router'\nimport { IonActionSheet, IonBadge, IonContent, IonFab, IonFabButton, IonIcon, IonItem, IonLabel, IonList, IonPage, IonText, useIonAlert, useIonToast } from '@ionic/react'\nimport Header from './header'\nimport Footer from './footer'\nimport { menuOutline } from 'ionicons/icons'\nimport { useSelector } from 'react-redux'\n\ntype Params = {\n  id: string\n}\ntype ExtendedOrderPack = OrderPack & {\n  priceNote: string,\n  statusNote: string\n}\nconst OrderDetails = () => {\n  const params = useParams<Params>()\n  const stateOrders = useSelector<State, Order[]>(state => state.orders)\n  const stateCustomerInfo = useSelector<State, CustomerInfo | undefined>(state => state.customerInfo)\n  const statePacks = useSelector<State, Pack[]>(state => state.packs)\n  const [order, setOrder] = useState(() => stateOrders.find(o => o.id === params.id))\n  const [orderBasket, setOrderBasket] = useState<ExtendedOrderPack[]>([])\n  const [lastOrder, setLastOrder] = useState<Order | undefined>(undefined)\n  const [actionOpened, setActionOpened] = useState(false)\n  const history = useHistory()\n  const location = useLocation()\n  const [message] = useIonToast()\n  const [alert] = useIonAlert()\n  useEffect(() => {\n    setOrder(() => stateOrders.find(o => o.id === params.id))\n  }, [stateOrders, params.id])\n  useEffect(() => {\n    setOrderBasket(() => order ? order.basket.map(p => {\n      const priceNote = p.actual && p.actual !== p.price ? `${labels.orderPrice}: ${(p.price / 100).toFixed(2)}, ${labels.currentPrice}: ${(p.actual / 100).toFixed(2)}` : `${labels.unitPrice}: ${(p.price / 100).toFixed(2)}`\n      const statusNote = `${orderPackStatus.find(s => s.id === p.status)?.name} ${p.overPriced ? labels.overPricedNote : ''}`\n      return {\n        ...p,\n        priceNote,\n        statusNote\n      }\n    }) : [])\n    setLastOrder(() => {\n      const orders = stateOrders.filter(o => o.id !== order?.id && !['c', 'm', 'r'].includes(o.status))\n      orders.sort((o1, o2) => o2.time! > o1.time! ? -1 : 1)\n      return ['n', 'a', 'e'].includes(orders[0]?.status) ? orders[0] : undefined\n    })\n  }, [order, stateOrders])\n \n  const handleEdit = () => {\n    try{\n      if (stateCustomerInfo?.isBlocked) {\n        throw new Error('blockedUser')\n      }\n      if (order?.status !== 'n' && order?.requestType) {\n        throw new Error('duplicateOrderRequest')\n      }\n      history.push(`/edit-order/${order?.id}`)\n    } catch(error) {\n      const err = error as Err\n      message(getMessage(location.pathname, err), 3000)\n    }\n  }\n  const confirmDelete = () => {\n    try{\n      if (stateCustomerInfo?.isBlocked) {\n        throw new Error('blockedUser')\n      }\n      if (order) {\n        if (order.status === 'n') {\n          cancelOrder(order)\n          message(labels.deleteSuccess, 3000)\n          history.goBack()\n        } else {\n          if (order.requestType) {\n            throw new Error('duplicateOrderRequest')\n          }\n          addOrderRequest(order, 'c')\n          message(labels.sendSuccess, 3000)\n          history.goBack()\n        }  \n      }\n    } catch(error) {\n      const err = error as Err\n      message(getMessage(location.pathname, err), 3000)\n    }\n  }\n  const handleDelete = () => {\n    alert({\n      header: labels.confirmationTitle,\n      message: labels.confirmationText,\n      buttons: [\n        {text: labels.cancel},\n        {text: labels.yes, handler: () => confirmDelete()},\n      ],\n    })\n  }\n  const handleMerge = () => {\n    try{\n      if (stateCustomerInfo?.isBlocked) {\n        throw new Error('blockedUser')\n      }\n      if (lastOrder?.status !== 'n' && lastOrder?.requestType) {\n        throw new Error('duplicateOrderRequest')\n      }\n      let found\n      if (order && lastOrder) {\n        for (let p of order.basket) {\n          found = lastOrder.basket.find(bp => bp.packId === p.packId)\n          if (found && found.price !== p.price) {\n            throw new Error('samePackWithDiffPrice')\n          }\n          if (found?.weight && found.weight > 0 && statePacks.find(pa => pa.id === p.packId)?.isDivided) {\n            throw new Error('samePackPurchasedByWeight')\n          }\n        }  \n        if (lastOrder.status === 'n') {\n          mergeOrders(lastOrder, order)\n          message(labels.mergeSuccess, 3000)\n        } else {\n          addOrderRequest(lastOrder, 'm', order)\n          message(labels.sendSuccess, 3000)  \n        }\n        history.goBack()\n      }\n    } catch(error) {\n      const err = error as Err\n      message(getMessage(location.pathname, err), 3000)\n    }\n  }\n  let i = 0\n  return(\n    <IonPage>\n      <Header title={labels.orderDetails} />\n      <IonContent fullscreen>\n        <IonList className=\"ion-padding\">\n          {orderBasket.map(p => \n            <IonItem key={p.packId}>\n              <IonLabel>\n                <IonText style={{color: colors[0].name}}>{p.productName}</IonText>\n                <IonText style={{color: colors[1].name}}>{p.productAlias}</IonText>\n                <IonText style={{color: colors[2].name}}>{p.packName}</IonText>\n                <IonText style={{color: colors[3].name}}>{p.priceNote}</IonText>\n                <IonText style={{color: colors[4].name}}>{quantityDetails(p)}</IonText>\n                <IonText style={{color: colors[5].name}}>{`${labels.status}: ${p.statusNote}`}</IonText>\n                {p.closeExpired && <IonBadge color=\"danger\">{labels.closeExpired}</IonBadge>}\n              </IonLabel>\n              <IonLabel slot=\"end\" className=\"price\">{(p.gross / 100).toFixed(2)}</IonLabel>\n            </IonItem>\n          )}\n          <IonItem>\n            <IonLabel>\n              <IonText style={{color: colors[0].name}}>{labels.total}</IonText>\n            </IonLabel>\n            <IonLabel slot=\"end\" className=\"price\">{((order?.total ?? 0) / 100).toFixed(2)}</IonLabel>\n          </IonItem>    \n          <IonItem>\n            <IonLabel>\n              <IonText style={{color: colors[0].name}}>{labels.fixedFees}</IonText>\n            </IonLabel>\n            <IonLabel slot=\"end\" className=\"price\">{(((order?.fixedFees ?? 0) + (order?.deliveryFees ?? 0)) / 100).toFixed(2)}</IonLabel>\n          </IonItem>    \n          <IonItem>\n            <IonLabel>\n              <IonText style={{color: colors[0].name}}>{labels.discount}</IonText>\n            </IonLabel>\n            <IonLabel slot=\"end\" className=\"price\">{(((order?.discount?.value ?? 0) + (order?.fraction ?? 0)) / 100).toFixed(2)}</IonLabel>\n          </IonItem>    \n          <IonItem>\n            <IonLabel>\n              <IonText style={{color: colors[0].name}}>{labels.net}</IonText>\n            </IonLabel>\n            <IonLabel slot=\"end\" className=\"price\">{(((order?.total ?? 0) + (order?.fixedFees ?? 0) + (order?.deliveryFees ?? 0) - (order?.discount?.value ?? 0) - (order?.fraction ?? 0)) / 100).toFixed(2)}</IonLabel>\n          </IonItem>    \n        </IonList>\n      </IonContent>\n      {order && ['n', 'a', 'e'].includes(order.status) && \n        <IonFab vertical=\"top\" horizontal=\"end\" slot=\"fixed\">\n          <IonFabButton onClick={() => setActionOpened(true)} color=\"success\">\n            <IonIcon ios={menuOutline} /> \n          </IonFabButton>\n        </IonFab>\n      }\n      <IonActionSheet\n        isOpen={actionOpened}\n        onDidDismiss={() => setActionOpened(false)}\n        buttons={[\n          {\n            text: order?.status === 'n' ? labels.editBasket : labels.editBasketRequest,\n            cssClass: colors[i++ % 10].name,\n            handler: () => handleEdit()\n          },\n          {\n            text: order?.status === 'n' ? labels.cancel : labels.cancelRequest,\n            cssClass: colors[i++ % 10].name,\n            handler: () => handleDelete()\n          },\n          {\n            text: lastOrder?.status === 'n' ? labels.merge : labels.mergeRequest,\n            cssClass: order?.status === 'n' && lastOrder ? colors[i++ % 10].name : 'ion-hide',\n            handler: () => handleMerge()\n          }\n        ]}\n      />\n      <Footer />\n    </IonPage>\n  )\n}\nexport default OrderDetails\n","/home/ayman/projects/uedokkaneh/src/pages/password-request.tsx",["195","196"],"import { useState, useEffect } from 'react'\nimport { getMessage, addPasswordRequest } from '../data/actions'\nimport labels from '../data/labels'\nimport { IonButton, IonContent, IonInput, IonItem, IonLabel, IonList, IonPage, useIonToast } from '@ionic/react'\nimport Header from './header'\nimport { useHistory, useLocation } from 'react-router'\nimport { patterns } from '../data/config'\nimport { useSelector } from 'react-redux'\nimport { Err, PasswordRequest as PasswordRequestType, State } from '../data/types'\n\nconst PasswordRequest = () => {\n  const statePasswordRequests = useSelector<State, PasswordRequestType[]>(state => state.passwordRequests)\n  const [mobile, setMobile] = useState('')\n  const [mobileInvalid, setMobileInvalid] = useState(false)\n  const history = useHistory()\n  const location = useLocation()\n  const [message] = useIonToast();\n  useEffect(() => {\n    setMobileInvalid(!mobile || !patterns.mobile.test(mobile))\n  }, [mobile])\n  const handlePasswordRequest = () => {\n    try{\n      if (statePasswordRequests.find(r => r.mobile === mobile)) {\n        throw new Error('duplicatePasswordRequest')\n      }\n      addPasswordRequest(mobile)\n      message(labels.sendSuccess, 3000)\n      history.goBack()\n    } catch (error){\n      const err = error as Err\n      message(getMessage(location.pathname, err), 3000)\n    }\n  }\n\n  return (\n    <IonPage>\n      <Header title={labels.passwordRequest} />\n      <IonContent fullscreen className=\"ion-padding\">\n        <IonList>\n          <IonItem>\n            <IonLabel position=\"floating\" color={mobileInvalid ? 'danger' : ''}>\n              {labels.mobile}\n            </IonLabel>\n            <IonInput \n              value={mobile} \n              type=\"number\" \n              autofocus\n              clearInput\n              onIonChange={e => setMobile(e.detail.value!)} \n              color={mobileInvalid ? 'danger' : ''}\n            />\n          </IonItem>\n        </IonList>\n        {!mobileInvalid &&  \n          <div className=\"ion-padding\" style={{textAlign: 'center'}}>\n            <IonButton \n              fill=\"solid\" \n              shape=\"round\"\n              style={{width: '10rem'}}\n              onClick={handlePasswordRequest}\n            >\n              {labels.send}\n            </IonButton>\n          </div>\n        }\n      </IonContent>\n    </IonPage>\n  )\n}\nexport default PasswordRequest\n","/home/ayman/projects/uedokkaneh/src/pages/store-summary.tsx",["197","198"],"import { useState, useEffect } from 'react'\nimport labels from '../data/labels'\nimport { colors, storeSummary } from '../data/config'\nimport {IonButton, IonContent, IonPage} from '@ionic/react'\nimport Header from './header'\nimport Footer from './footer'\nimport { useSelector } from 'react-redux'\nimport { CustomerInfo, Pack, PackPrice, State } from '../data/types'\n\ntype ExtendedSections = {\n  id: string,\n  name: string,\n  count: number\n}\nconst StoreSummary = () => {\n  const statePackPrices = useSelector<State, PackPrice[]>(state => state.packPrices)\n  const statePacks = useSelector<State, Pack[]>(state => state.packs)\n  const stateCustomerInfo = useSelector<State, CustomerInfo | undefined>(state => state.customerInfo)\n  const [sections, setSections] = useState<ExtendedSections[]>([])\n  useEffect(() => {\n    setSections(() => {\n      const storePacks = statePackPrices.filter(p => p.storeId === stateCustomerInfo?.storeId)\n      const extendedStorePacks = storePacks.map(p => {\n        const packInfo = statePacks.find(pa => pa.id === p.packId)\n        return {\n          ...p,\n          packInfo\n        }\n      })\n      const sections = storeSummary.map(s => {\n        const packs = extendedStorePacks.filter(p => (s.id === 'a') \n                                          || (s.id === 'o' && p.price > (p.packInfo?.price ?? 0)) \n                                          || (s.id === 'n' && p.price === (p.packInfo?.price ?? 0) && p.storeId !== p.packInfo?.minStoreId)\n                                          || (s.id === 'l' && p.price === (p.packInfo?.price ?? 0) && p.storeId === p.packInfo?.minStoreId))\n        return {\n          ...s,\n          count: packs.length\n        }\n      })\n      return sections\n    })\n  }, [statePackPrices, statePacks, stateCustomerInfo])\n  let i = 0\n  return(\n    <IonPage>\n      <Header title={labels.myPacks} />\n      <IonContent fullscreen>\n        {sections.map(s => \n          <IonButton\n            routerLink={`/store-packs/${s.id}`} \n            expand=\"block\"\n            shape=\"round\"\n            className={colors[i++ % 10].name}\n            style={{margin: '0.9rem'}} \n            key={s.id}\n          >\n            {`${s.name} (${s.count})`}\n          </IonButton>\n        )}\n      </IonContent>\n      <Footer />\n    </IonPage>\n  )\n}\n\nexport default StoreSummary\n","/home/ayman/projects/uedokkaneh/src/pages/invite-friend.tsx",["199","200"],"import { useState, useEffect } from 'react'\nimport { inviteFriend, getMessage } from '../data/actions'\nimport labels from '../data/labels'\nimport { IonContent, IonInput, IonItem, IonLabel, IonList, IonPage, useIonToast, IonButton } from '@ionic/react'\nimport Header from './header'\nimport { useHistory, useLocation } from 'react-router'\nimport { patterns } from '../data/config'\nimport { useSelector } from 'react-redux'\nimport { CustomerInfo, Err, State, UserInfo } from '../data/types'\n\nconst InviteFriend = () => {\n  const stateCustomerInfo = useSelector<State, CustomerInfo | undefined>(state => state.customerInfo)\n  const stateUserInfo = useSelector<State, UserInfo | undefined>(state => state.userInfo)\n  const [name, setName] = useState('')\n  const [mobile, setMobile] = useState('')\n  const [nameInvalid, setNameInvalid] = useState(true)\n  const [mobileInvalid, setMobileInvalid] = useState(true)\n  const history = useHistory()\n  const location = useLocation()\n  const [message] = useIonToast()\n\n  useEffect(() => {\n    setNameInvalid(!name || !patterns.name.test(name))\n  }, [name])\n  useEffect(() => {\n    setMobileInvalid(!mobile || !patterns.mobile.test(mobile))\n  }, [mobile])\n  const handleSend = () => {\n    try{\n      if (stateCustomerInfo?.isBlocked) {\n        throw new Error('blockedUser')\n      }\n      if (stateUserInfo?.friends?.find(f => f.mobile === mobile)) {\n        throw new Error('duplicateInvitation')\n      }\n      if (mobile === stateUserInfo?.mobile) {\n        throw new Error('invalidMobile')\n      }\n      inviteFriend(mobile, name)\n      message(labels.sendSuccess, 3000)\n      history.goBack()\n    } catch (error){\n      const err = error as Err\n      message(getMessage(location.pathname, err), 3000)\n    }\n  }\n\n  return (\n    <IonPage>\n      <Header title={labels.inviteFriend} />\n      <IonContent fullscreen className=\"ion-padding\">\n        <IonList>\n          <IonItem>\n            <IonLabel position=\"floating\" color={nameInvalid ? 'danger' : 'primary'}>\n              {labels.name}\n            </IonLabel>\n            <IonInput \n              value={name} \n              type=\"text\" \n              placeholder={labels.namePlaceholder}\n              autofocus\n              clearInput\n              onIonChange={e => setName(e.detail.value!)} \n              color={nameInvalid ? 'danger' : ''}\n            />\n          </IonItem>\n          <IonItem>\n            <IonLabel position=\"floating\" color={mobileInvalid ? 'danger' : 'primary'}>\n              {labels.mobile}\n            </IonLabel>\n            <IonInput \n              value={mobile} \n              type=\"number\" \n              placeholder={labels.mobilePlaceholder}\n              clearInput\n              onIonChange={e => setMobile(e.detail.value!)} \n              color={mobileInvalid ? 'danger' : ''}\n            />\n          </IonItem>\n        </IonList>\n      </IonContent>\n      {!mobileInvalid && !nameInvalid &&\n        <div className=\"ion-padding\" style={{textAlign: 'center'}}>\n          <IonButton \n            fill=\"solid\" \n            shape=\"round\"\n            style={{width: '10rem'}}\n            onClick={handleSend}\n          >\n            {labels.send}\n          </IonButton>\n        </div>\n      }\n    </IonPage>\n  )\n}\nexport default InviteFriend\n","/home/ayman/projects/uedokkaneh/src/pages/store-packs.tsx",["201","202"],"import { useState, useEffect } from 'react'\nimport moment from 'moment'\nimport 'moment/locale/ar'\nimport labels from '../data/labels'\nimport { colors, storeSummary } from '../data/config'\nimport { productOfText } from '../data/actions'\nimport { CustomerInfo, Pack, PackPrice, State } from '../data/types'\nimport { useParams } from 'react-router'\nimport { IonBadge, IonContent, IonImg, IonItem, IonLabel, IonList, IonPage, IonText, IonThumbnail } from '@ionic/react'\nimport Header from './header'\nimport Footer from './footer'\nimport { useSelector } from 'react-redux'\n\ntype Params = {\n  type: string\n}\ntype ExtendedPackPrice = PackPrice & {\n  packInfo: Pack\n}\nconst StorePacks = () => {\n  const params = useParams<Params>()\n  const statePackPrices = useSelector<State, PackPrice[]>(state => state.packPrices)\n  const statePacks = useSelector<State, Pack[]>(state => state.packs)\n  const stateCustomerInfo = useSelector<State, CustomerInfo | undefined>(state => state.customerInfo)\n  const [storePacks, setStorePacks] = useState<ExtendedPackPrice[]>([])\n  useEffect(() => {\n    setStorePacks(() => {\n      const storePacks = statePackPrices.filter(p => p.storeId === stateCustomerInfo?.storeId)\n      const extendedStorePacks = storePacks.map(p => {\n        const packInfo = statePacks.find(pa => pa.id === p.packId)!\n        return {\n          ...p,\n          packInfo\n        }\n      })\n      return extendedStorePacks.filter(p => (params.type === 'a')\n                            || (params.type === 'o' && p.price > (p.packInfo.price ?? 0)) \n                            || (params.type === 'n' && p.price === (p.packInfo.price ?? 0) && p.storeId !== p.packInfo?.minStoreId)\n                            || (params.type === 'l' && p.price === (p.packInfo.price ?? 0) && p.storeId === p.packInfo?.minStoreId))\n    })\n  }, [statePackPrices, statePacks, stateCustomerInfo, params.type])\n\n  let i = 0\n  return(\n    <IonPage>\n      <Header title={storeSummary.find(s => s.id === params.type)?.name} />\n      <IonContent fullscreen>\n        <IonList className=\"ion-padding\">\n          {storePacks.length === 0 ? \n            <IonItem> \n              <IonLabel>{labels.noData}</IonLabel>\n            </IonItem> \n          : storePacks.map(p => \n              <IonItem key={i++} routerLink={`/pack-details/${p.packId}/o`}>\n                <IonThumbnail slot=\"start\">\n                  <IonImg src={p.packInfo.imageUrl} alt={labels.noImage} />\n                </IonThumbnail>\n                <IonLabel>\n                  <IonText style={{color: colors[0].name}}>{p.packInfo.productName}</IonText>\n                  <IonText style={{color: colors[1].name}}>{p.packInfo.productAlias}</IonText>\n                  <IonText style={{color: colors[2].name}}>{p.packInfo.productDescription}</IonText>\n                  <IonText style={{color: colors[3].name}}>{p.packInfo.name}</IonText>\n                  <IonText style={{color: colors[4].name}}>{productOfText(p.packInfo.trademark ?? '', p.packInfo.country ?? '')}</IonText>\n                  {p.price > (p.packInfo.price ?? 0) && <IonText style={{color: colors[5].name}}>{`${labels.myPrice}: ${(p.price / 100).toFixed(2)}`}</IonText>}\n                  <IonText style={{color: colors[6].name}}>{moment(p.time).fromNow()}</IonText>\n                  {p.packInfo.isOffer && <IonBadge color=\"success\">{labels.offer}</IonBadge>}\n                </IonLabel>\n                <IonLabel slot=\"end\" className=\"price\">{((p.packInfo.price ?? 0) / 100).toFixed(2)}</IonLabel>\n              </IonItem>\n            )\n          }\n        </IonList>\n      </IonContent>\n      <Footer />\n    </IonPage>\n  )\n}\n\nexport default StorePacks\n","/home/ayman/projects/uedokkaneh/src/pages/change-password.tsx",[],"/home/ayman/projects/uedokkaneh/src/pages/hints.tsx",["203","204"],"import { useState, useEffect } from 'react'\nimport labels from '../data/labels'\nimport { productOfText } from '../data/actions'\nimport { Category, Pack, State } from '../data/types'\nimport { IonBadge, IonContent, IonImg, IonItem, IonLabel, IonList, IonPage, IonText, IonThumbnail } from '@ionic/react'\nimport Header from './header'\nimport Footer from './footer'\nimport { colors } from '../data/config'\nimport { useSelector } from 'react-redux'\n\ntype Props = {\n  id: string,\n  type: string\n}\nconst Hints = (props: Props) => {\n  const statePacks = useSelector<State, Pack[]>(state => state.packs)\n  const stateCategories = useSelector<State, Category[]>(state => state.categories)\n  const [pack] = useState(() => statePacks.find(p => p.id === props.id))\n  const [packs, setPacks] = useState<Pack[]>([])\n  useEffect(() => {\n    setPacks(() => {\n      let packs = statePacks.filter(p => \n        (props.type === 'p' && p.categoryId === pack?.categoryId && (p.sales > pack.sales || p.rating > pack.rating)) ||\n        (props.type === 'o' && p.productId === pack?.productId && p.id !== pack.id && (p.isOffer || p.offerEnd)) ||\n        (props.type === 'w' && p.productId === pack?.productId && p.weightedPrice < pack.weightedPrice)\n      )\n      return packs.sort((p1, p2) => p1.weightedPrice - p2.weightedPrice)  \n    })\n  }, [pack, statePacks, stateCategories, props.type]) \n  return(\n    <IonPage>\n      <Header title={props.type === 'p' ? labels.otherProducts : (props.type === 'o' ? labels.otherOffers : labels.otherPacks)} />\n      <IonContent fullscreen>\n        <IonList className=\"ion-padding\">\n          {packs.length === 0 ? \n            <IonItem> \n              <IonLabel>{labels.noData}</IonLabel>\n            </IonItem>\n          : packs.map(p => \n              <IonItem key={p.id} routerLink={`/pack-details/${p.id}/c`}>\n                <IonThumbnail slot=\"start\">\n                  <IonImg src={p.imageUrl} alt={labels.noImage} />\n                </IonThumbnail>\n                <IonLabel>\n                  <IonText style={{color: colors[0].name}}>{p.productName}</IonText>\n                  <IonText style={{color: colors[1].name}}>{p.productAlias}</IonText>\n                  <IonText style={{color: colors[2].name}}>{p.name}</IonText>\n                  <IonText style={{color: colors[3].name}}>{p.productDescription}</IonText>\n                  <IonText style={{color: colors[4].name}}>{productOfText(p.trademark, p.country)}</IonText>\n                  <IonText style={{color: colors[5].name}}>{`${labels.category}: ${stateCategories.find(c => c.id === p.categoryId)?.name}`}</IonText>\n                  {p.closeExpired && <IonBadge color=\"danger\">{labels.closeExpired}</IonBadge>}\n                </IonLabel>\n                <IonLabel slot=\"end\" className=\"price\">{p.isOffer || p.offerEnd ? '' : (p.price / 100).toFixed(2)}</IonLabel>\n                {(p.isOffer || p.offerEnd) && <IonBadge slot=\"end\" color=\"success\">{(p.price / 100).toFixed(2)}</IonBadge>}\n              </IonItem>\n            )\n          }\n        </IonList>\n      </IonContent>\n      <Footer />\n    </IonPage>\n  )\n}\n\nexport default Hints","/home/ayman/projects/uedokkaneh/src/pages/help.tsx",["205","206"],"import { useState } from 'react'\nimport labels from '../data/labels'\nimport { IonContent, IonPage } from '@ionic/react'\nimport Header from './header'\nimport Footer from './footer'\nimport { useParams } from 'react-router'\nimport { useSelector } from 'react-redux'\nimport { Region, State, UserInfo } from '../data/types'\n\ntype Params = {\n  id: string\n}\nconst Help = () => {\n  const params = useParams<Params>()\n  const stateRegions = useSelector<State, Region[]>(state => state.regions)\n  const stateUserInfo = useSelector<State, UserInfo | undefined>(state => state.userInfo)\n\n  const [userRegion] = useState(() => stateRegions.find(r => r.id === stateUserInfo?.regionId))\n  const [helpNote] = useState(() => {\n    switch (params.id) {\n      case 'o':\n        return 'يمكنك تتبع مراحل تنفيذ طلبك من خلال خيار طلباتي من القائمة الجانبية في الصفحة الرئيسية، حيث تستطيع التعديل على الطلب أو إلغاؤه قبل بدء تنفيذه، كما يمكنك دمج الطلب مع الطلب الذي قبله ليتم تسلمهما معا'\n      case 'ol':\n        return 'سقف الطلبات الفعالة هو خمسون دينارا، ويمكنك طلب رفع هذه القيمة بالتواصل معنا'\n      default:\n        return ''\n    }\n  })\n  const feesNote = 'رسوم الخدمة هي 1% من قيمة المشتريات، مضافا إليها رسوم التوصيل والتي تتحدد بناء على منطقتك'\n  const regionFeesNote = 'حيث أن رسوم التوصيل ل'\n  const ratingsNote = 'كذلك لا تنس تقييم المنتجات التي تشتريها حتى يستفيد الاخرون من تجربتك للمنتج، وذلك من خلال صفحة مشترياتي والتي يمكن الوصول اليها من القائمة الجانبية في الصفحة الرئيسية'\n  const invitationsNote = ' وللحصول على المزيد من الخصومات لا تنس دعوة أصدقائك من خلال القائمة الجانبية في الصفحة الرئيسية حيث سوف تحصل على خصم لكل صديق يشترك معنا'\n  return (\n    <IonPage>\n      <Header title={labels.helpPageTitle} />\n      <IonContent fullscreen>\n        <p className=\"note\">{helpNote}</p>\n        {params.id === 'o' &&\n          <>\n            <p className=\"help1\">{feesNote}</p>\n            {userRegion && userRegion.fees > 0 && <p className=\"help1\">{`${regionFeesNote}${userRegion.name}: ${(userRegion.fees / 100).toFixed(2)}`}</p>}\n            <p className=\"help2\">{invitationsNote}</p>\n            <p className=\"help2\">{ratingsNote}</p>\n          </>\n        }\n      </IonContent>\n      <Footer />\n    </IonPage>\n  )\n}\n\nexport default Help","/home/ayman/projects/uedokkaneh/src/pages/notifications.tsx",["207","208"],"import { useState, useEffect } from 'react'\nimport labels from '../data/labels'\nimport moment from 'moment'\nimport 'moment/locale/ar'\nimport { getMessage, deleteNotification } from '../data/actions'\nimport { Err, Notification, State } from '../data/types'\nimport { IonContent, IonIcon, IonItem, IonLabel, IonList, IonPage, IonText, useIonToast } from '@ionic/react'\nimport Header from './header'\nimport { useLocation } from 'react-router'\nimport { colors } from '../data/config'\nimport { trashOutline } from 'ionicons/icons'\nimport Footer from './footer'\nimport { useSelector } from 'react-redux'\n\nconst Notifications = () => {\n  const stateNotifications = useSelector<State, Notification[]>(state => state.notifications)\n  const [notifications, setNotifications] = useState<Notification[]>([])\n  const location = useLocation()\n  const [message] = useIonToast()\n  useEffect(() => {\n      setNotifications(() => [...stateNotifications].sort((n1, n2) => n1.time > n2.time ? -1 : 1))\n  }, [stateNotifications])\n  const handleDelete = (notification: Notification) => {\n    try{\n      deleteNotification(notification.id, stateNotifications)\n      message(labels.deleteSuccess, 3000)\n    } catch(error) {\n      const err = error as Err\n      message(getMessage(location.pathname, err), 3000)\n    }\n  }\n  return (\n    <IonPage>\n      <Header title={labels.notifications} />\n      <IonContent fullscreen className=\"ion-padding\">\n        <IonList>\n          {notifications.length === 0 ?\n            <IonItem> \n              <IonLabel>{labels.noData}</IonLabel>\n            </IonItem>\n          : notifications.map(n => \n              <IonItem key={n.id}>\n                <IonLabel>\n                  <IonText style={{color: colors[0].name}}>{n.title}</IonText>\n                  <IonText style={{color: colors[1].name}}><p>{n.text}</p></IonText>\n                  <IonText style={{color: colors[2].name}}>{moment(n.time).fromNow()}</IonText>\n                </IonLabel>\n                <IonIcon \n                  ios={trashOutline} \n                  slot=\"end\" \n                  color=\"danger\"\n                  style={{fontSize: '20px', marginRight: '10px'}} \n                  onClick={()=> handleDelete(n)}\n                />\n              </IonItem>    \n            )\n          }\n        </IonList>\n      </IonContent>\n      <Footer />\n    </IonPage>\n  )\n}\n\nexport default Notifications\n","/home/ayman/projects/uedokkaneh/src/pages/edit-order.tsx",["209","210"],"import { useEffect, useState } from 'react'\nimport { editOrder, getMessage, quantityDetails } from '../data/actions'\nimport labels from '../data/labels'\nimport { setup, colors } from '../data/config'\nimport { CustomerInfo, Err, Order, OrderPack, Pack, State } from '../data/types'\nimport { IonBadge, IonButton, IonButtons, IonContent, IonIcon, IonImg, IonItem, IonLabel, IonList, IonPage, IonText, IonThumbnail, useIonToast } from '@ionic/react'\nimport Header from './header'\nimport Footer from './footer'\nimport { useHistory, useLocation, useParams } from 'react-router'\nimport { addOutline, removeOutline } from 'ionicons/icons'\nimport { useSelector, useDispatch } from 'react-redux'\n\ntype Params = {\n  id: string\n}\nconst EditOrder = () => {\n  const params = useParams<Params>()\n  const dispatch = useDispatch()\n  const stateOrders = useSelector<State, Order[]>(state => state.orders)\n  const statePacks = useSelector<State, Pack[]>(state => state.packs)\n  const stateOrderBasket = useSelector<State, OrderPack[]>(state => state.orderBasket)\n  const stateCustomerInfo = useSelector<State, CustomerInfo | undefined>(state => state.customerInfo)\n  const [order] = useState(() => stateOrders.find(o => o.id === params.id))\n  const [orderBasket, setOrderBasket] = useState<OrderPack[]>([])\n  const [total, setTotal] = useState(0)\n  const [overLimit, setOverLimit] = useState(false)\n  const [hasChanged, setHasChanged] = useState(false)\n  const history = useHistory()\n  const location = useLocation()\n  const [message] = useIonToast()\n  const [customerOrdersTotals] = useState(() => {\n    const activeOrders = stateOrders.filter(o => ['n', 'a', 'e', 'f', 'p'].includes(o.status))\n    return activeOrders.reduce((sum, o) => sum + o.total, 0)\n  })\n  useEffect(() => {\n    if (order) {\n      const basket = order.basket.map(p => {\n        return {\n          ...p,\n          oldQuantity: p.quantity\n        }\n      })\n      dispatch({type: 'LOAD_ORDER_BASKET', payload: basket})\n    }\n  }, [dispatch, order])\n  useEffect(() => {\n    setOrderBasket(() => {\n      const basket = stateOrderBasket?.filter(p => p.quantity > 0) || []\n      return basket.map(p => {\n        const packInfo = statePacks.find(pa => pa.id === p.packId)\n        return {\n          ...p,\n          packInfo\n        }\n      })\n    })\n  }, [stateOrderBasket, statePacks])\n  useEffect(() => {\n    setHasChanged(() => stateOrderBasket?.find(p => p.oldQuantity !== p.quantity) ? true : false)\n  }, [stateOrderBasket])\n  useEffect(() => {\n    setTotal(() => orderBasket.reduce((sum, p) => sum + p.gross, 0))\n  }, [orderBasket])\n  useEffect(() => {\n    const orderLimit = stateCustomerInfo?.orderLimit ?? setup.orderLimit\n    if (customerOrdersTotals + total > orderLimit){\n      setOverLimit(true)\n    } else {\n      setOverLimit(false)\n    }\n  }, [stateCustomerInfo, customerOrdersTotals, total])\n\n  const handleSubmit = () => {\n    try{\n      if (stateCustomerInfo?.isBlocked) {\n        throw new Error('blockedUser')\n      }\n      if (order) {\n        editOrder(order, stateOrderBasket)\n        message(order.status === 'n' ? labels.editSuccess : labels.sendSuccess, 3000)\n        dispatch({type: 'CLEAR_ORDER_BASKET'})\n        history.goBack()  \n      }\n    } catch(error) {\n      const err = error as Err\n\t\t\tmessage(getMessage(location.pathname, err), 3000)\n\t\t}\n  }\n  return (\n    <IonPage>\n      <Header title={labels.editOrder} />\n      <IonContent fullscreen>\n        <IonList className=\"ion-padding\">\n          {orderBasket.map(p =>\n            <IonItem key={p.packId}>\n              <IonThumbnail slot=\"start\">\n                <IonImg src={p.imageUrl} alt={labels.noImage} />\n              </IonThumbnail>\n              <IonLabel>\n                <IonText style={{color: colors[0].name}}>{p.productName}</IonText>\n                <IonText style={{color: colors[1].name}}>{p.productAlias}</IonText>\n                <IonText style={{color: colors[2].name}}>{p.packName}</IonText>\n                <IonText style={{color: colors[3].name}}>{`${labels.unitPrice}: ${(p.price / 100).toFixed(2)}`}</IonText>\n                <IonText style={{color: colors[4].name}}>{quantityDetails(p)}</IonText>\n                <IonText style={{color: colors[5].name}}>{`${labels.price}: ${(p.gross / 100).toFixed(2)}`}</IonText>\n                {!p.packInfo && <IonBadge color=\"danger\">{labels.unAvailableNote}</IonBadge>}\n              </IonLabel>\n              {p.packInfo && <>\n                <IonButtons slot=\"end\" onClick={() => dispatch({type: 'DECREASE_ORDER_QUANTITY', payload: p})}>\n                  <IonIcon \n                    ios={removeOutline} \n                    color=\"primary\" \n                    style={{fontSize: '25px', marginRight: '5px'}} \n                  />\n                </IonButtons>\n                <IonButtons slot=\"end\" onClick={() => dispatch({type: 'INCREASE_ORDER_QUANTITY', payload: p})}>\n                  <IonIcon \n                    ios={addOutline} \n                    color=\"primary\" \n                    style={{fontSize: '25px', marginRight: '5px'}} \n                  />\n                </IonButtons>\n              </>}\n            </IonItem>    \n          )}\n        </IonList>\n      </IonContent>\n      {(!overLimit && hasChanged) &&\n        <div className=\"ion-text-center\">\n          <IonButton \n            fill=\"solid\" \n            shape=\"round\"\n            color=\"secondary\"\n            style={{width: '10rem'}}\n            onClick={handleSubmit}\n          >\n            {`${labels.submit} ${(total / 100).toFixed(2)}`}\n          </IonButton>\n        </div>\n      }\n      {overLimit && \n        <div className=\"ion-text-center\">\n          <IonButton \n            fill=\"solid\" \n            shape=\"round\"\n            color=\"danger\"\n            style={{width: '10rem'}}\n            onClick={() => history.push('/help/ol')}\n          >\n            {labels.limitOverFlowNote}\n          </IonButton>\n        </div>\n      }\n      <Footer />\n    </IonPage>\n  )\n}\nexport default EditOrder\n","/home/ayman/projects/uedokkaneh/src/pages/advert.tsx",["211"],"import { useContext, useState } from 'react'\nimport labels from '../data/labels'\nimport { IonCard, IonCol, IonContent, IonGrid, IonImg, IonPage, IonRow } from '@ionic/react'\nimport Header from './header'\nimport { useSelector } from 'react-redux'\nimport { Advert as AdvertType, State } from '../data/types'\n\nconst Advert = () => {\n  const stateAdverts = useSelector<State, AdvertType[]>(state => state.adverts)\n  const [advert] = useState(stateAdverts[0])\n  return (\n    <IonPage>\n      <Header title={labels.advert} />\n      <IonContent fullscreen>\n        <IonCard>\n          <IonGrid>\n            <IonRow>\n              <IonCol className=\"card-title\">{advert.title}</IonCol>\n            </IonRow>\n            <IonRow>\n              <IonCol>\n                {advert.imageUrl && <IonImg src={advert.imageUrl} alt={advert.title} />}\n              </IonCol>\n            </IonRow>\n            <IonRow>\n              <IonCol className=\"ion-text-center\">{advert.text}</IonCol>\n            </IonRow>\n          </IonGrid>\n        </IonCard>\n      </IonContent>\n    </IonPage>\n  )\n}\n\nexport default Advert\n","/home/ayman/projects/uedokkaneh/src/pages/purchased-packs.tsx",["212","213"],"import { useEffect, useState } from 'react'\nimport { quantityText, addQuantity } from '../data/actions'\nimport labels from '../data/labels'\nimport moment from 'moment'\nimport 'moment/locale/ar'\nimport { getMessage, rateProduct } from '../data/actions'\nimport { CustomerInfo, Order, State, UserInfo } from '../data/types'\nimport { IonActionSheet, IonButtons, IonContent, IonIcon, IonImg, IonItem, IonLabel, IonList, IonPage, IonText, IonThumbnail, useIonToast } from '@ionic/react'\nimport Header from './header'\nimport Footer from './footer'\nimport { useLocation } from 'react-router'\nimport { colors } from '../data/config'\nimport { heartDislikeOutline, heartHalfOutline, heartOutline } from 'ionicons/icons'\nimport { useSelector } from 'react-redux'\n\ntype PurchasedPack = {\n  packId: string,\n  productId: string,\n  productName: string,\n  productAlias: string,\n  packName: string,\n  imageUrl: string,\n  bestPrice: number,\n  lastPrice: number,\n  quantity: number,\n  lastQuantity: number,\n  lastTime: Date\n}\n\nconst PurchasedPacks = () => {\n  const stateOrders = useSelector<State, Order[]>(state => state.orders)\n  const stateUserInfo = useSelector<State, UserInfo | undefined>(state => state.userInfo)\n  const stateCustomerInfo = useSelector<State, CustomerInfo | undefined>(state => state.customerInfo)\n\tconst [purchasedPacks, setPurchasedPacks] = useState<PurchasedPack[]>([])\n  const [deliveredOrders, setDeliveredOrders] = useState<Order[]>([])\n  const [currentPack, setCurrentPack] = useState<PurchasedPack | undefined>(undefined)\n  const [ratingOpened, setRatingOpened] = useState(false)\n  const location = useLocation()\n  const [message] = useIonToast()\n\n  useEffect(() => {\n    setDeliveredOrders(() => {\n      const deliveredOrders = stateOrders.filter(o => o.status === 'd')\n      return deliveredOrders.sort((o1, o2) => o1.time! > o2.time! ? -1 : 1)\n    })\n  }, [stateOrders])\n\tuseEffect(() => {\n\t\tlet packsArray: PurchasedPack[] = []\n\t\tdeliveredOrders.forEach(o => {\n\t\t\to.basket.forEach(p => {\n        const found = packsArray.findIndex(pa => pa.packId === p.packId)\n\t\t\t\tif (found > -1) {\n          packsArray.splice(found, 1, {\n            ...packsArray[found],\n            bestPrice: packsArray[found].bestPrice <= p.actual! ? packsArray[found].bestPrice! : p.actual!,\n            lastPrice: p.actual!,\n            quantity: addQuantity(packsArray[found].quantity, p.purchased),\n            lastQuantity: p.purchased,\n            lastTime: o.time!\n          })\n\t\t\t\t} else {\n          packsArray.push({\n            packId: p.packId,\n            productId: p.productId,\n            productName: p.productName,\n            productAlias: p.productAlias,\n            packName: p.packName,\n            imageUrl: p.imageUrl,\n            bestPrice: p.actual!,\n            lastPrice: p.actual!,\n            quantity: p.purchased,\n            lastQuantity: p.purchased,\n            lastTime: o.time!\n          })\n        }\n\t\t\t})\n\t\t})\n\t\tsetPurchasedPacks(packsArray.sort((p1, p2) => p2.lastTime > p1.lastTime ? -1 : 1))\n  }, [deliveredOrders])\n  const handleRate = (value: number) => {\n    try{\n      if (stateCustomerInfo?.isBlocked) {\n        throw new Error('blockedUser')\n      }\n      if (currentPack) {\n        rateProduct(currentPack.productId, value)\n        message(labels.ratingSuccess, 3000)  \n      }\n    } catch(err) {\n      message(getMessage(location.pathname, err), 3000)\n    }\n  }\n  const handleActions = (pack: PurchasedPack)=> {\n    setCurrentPack(pack)\n    setRatingOpened(true)\n  }\n  let i = 0\n  return(\n    <IonPage>\n      <Header title={labels.purchasedPacks} />\n      <IonContent fullscreen>\n\t\t\t\t<IonList className=\"ion-padding\">\n\t\t\t\t\t{purchasedPacks.length === 0 ? \n\t\t\t\t\t\t<IonItem> \n              <IonLabel>{labels.noData}</IonLabel>\n            </IonItem> \n\t\t\t\t\t: purchasedPacks.map(p => \n              <IonItem key={i++} className={currentPack?.packId === p.packId ? 'selected' : ''}>\n                <IonThumbnail slot=\"start\">\n                  <IonImg src={p.imageUrl} alt={labels.noImage} />\n                </IonThumbnail>\n                <IonLabel>\n                  <IonText style={{color: colors[0].name}}>{p.productName}</IonText>\n                  <IonText style={{color: colors[1].name}}>{p.productAlias}</IonText>\n                  <IonText style={{color: colors[2].name}}>{p.packName}</IonText>\n                  <IonText style={{color: colors[3].name}}>{`${labels.bestPrice}: ${(p.bestPrice / 100).toFixed(2)}`}</IonText>\n                  <IonText style={{color: colors[4].name}}>{`${labels.lastPrice}: ${(p.lastPrice / 100).toFixed(2)}`}</IonText>\n                  <IonText style={{color: colors[5].name}}>{`${labels.quantity}: ${quantityText(p.quantity)}`}</IonText>\n                  <IonText style={{color: colors[6].name}}>{`${labels.lastQuantity}: ${quantityText(p.lastQuantity)}`}</IonText>\n                  <IonText style={{color: colors[7].name}}>{`${labels.lastTime}: ${moment(p.lastTime).fromNow()}`}</IonText>\n                </IonLabel>\n                {!stateUserInfo?.ratings?.find(r => r.productId === p.productId) &&\n                  <IonButtons slot=\"end\" onClick={() => handleActions(p)}>\n                    <IonIcon \n                      ios={heartOutline} \n                      color=\"primary\" \n                      style={{fontSize: '25px', marginRight: '5px'}} \n                    />\n                  </IonButtons>\n                }\n              </IonItem>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t</IonList>\n      </IonContent>\n      <IonActionSheet\n        isOpen={ratingOpened}\n        onDidDismiss={() => setRatingOpened(false)}\n        buttons={[\n          {\n            text: labels.rateGood,\n            icon: heartOutline,\n            cssClass: 'good',\n            handler: () => handleRate(5)\n          },\n          {\n            text: labels.rateMiddle,\n            icon: heartHalfOutline,\n            cssClass: 'medium',\n            handler: () => handleRate(3)\n          },\n          {\n            text: labels.rateBad,\n            icon: heartDislikeOutline,\n            cssClass: 'bad',\n            handler: () => handleRate(1)\n          },\n        ]}\n      />\n      <Footer />\n    </IonPage>\n  )\n}\n\nexport default PurchasedPacks","/home/ayman/projects/uedokkaneh/src/pages/friends.tsx",["214","215"],"import { useState, useEffect } from 'react'\nimport labels from '../data/labels'\nimport { deleteFriend, getMessage } from '../data/actions'\nimport { friendStatus, colors } from '../data/config'\nimport { Err, Friend, State, UserInfo } from '../data/types'\nimport { IonContent, IonFab, IonFabButton, IonIcon, IonItem, IonLabel, IonList, IonPage, IonText, useIonAlert, useIonToast } from '@ionic/react'\nimport Header from './header'\nimport Footer from './footer'\nimport { useLocation } from 'react-router'\nimport { addOutline, trashOutline } from 'ionicons/icons'\nimport { useSelector } from 'react-redux'\n\nconst Friends = () => {\n  const stateUserInfo = useSelector<State, UserInfo | undefined>(state => state.userInfo)\n  const [friends, setFriends] = useState<Friend[]>([])\n  const location = useLocation()\n  const [message] = useIonToast()\n  const [alert] = useIonAlert()\n  useEffect(() => {\n    setFriends(() => {\n      const friends = stateUserInfo?.friends?.slice() || []\n      return friends.sort((f1, f2) => f1.name > f2.name ? 1 : -1)\n    })\n  }, [stateUserInfo])\n  const handleDelete = (mobile: string) => {\n    alert({\n      header: labels.confirmationTitle,\n      message: labels.confirmationText,\n      buttons: [\n        {text: labels.cancel},\n        {text: labels.yes, handler: () => {\n          try{\n            if (stateUserInfo) {\n              deleteFriend(stateUserInfo, mobile)\n              message(labels.deleteSuccess, 3000)  \n            }\n          } catch(error) {\n            const err = error as Err\n            message(getMessage(location.pathname, err), 3000)\n          }    \n        }},\n      ],\n    })\n  }\n  let i = 0\n  return (\n    <IonPage>\n      <Header title={labels.friends} />\n      <IonContent fullscreen>\n        <IonList className=\"ion-padding\">\n          {friends.length === 0 ? \n            <IonItem> \n              <IonLabel>{labels.noData}</IonLabel>\n            </IonItem>\n          : friends.map(f =>\n              <IonItem key={i++}>\n                <IonLabel>\n                  <IonText style={{color: colors[0].name}}>{f.name}</IonText>\n                  <IonText style={{color: colors[1].name}}>{f.mobile}</IonText>\n                  <IonText style={{color: colors[2].name}}>{friendStatus.find(s => s.id === f.status)?.name}</IonText>\n                </IonLabel>\n                <IonIcon \n                  ios={trashOutline} \n                  slot=\"end\" \n                  color=\"danger\"\n                  style={{fontSize: '20px', marginRight: '10px'}} \n                  onClick={()=> handleDelete(f.mobile)}\n                />\n              </IonItem>    \n            )\n          }\n        </IonList>\n      </IonContent>\n      <IonFab vertical=\"top\" horizontal=\"end\" slot=\"fixed\">\n        <IonFabButton routerLink=\"/invite-friend\" color=\"success\">\n          <IonIcon ios={addOutline} /> \n        </IonFabButton>\n      </IonFab>\n      <Footer />\n    </IonPage>\n  )\n}\n\nexport default Friends\n","/home/ayman/projects/uedokkaneh/src/data/reducer.ts",[],"/home/ayman/projects/uedokkaneh/src/data/firebase.ts",[],"/home/ayman/projects/uedokkaneh/src/data/labels.ts",[],"/home/ayman/projects/uedokkaneh/src/data/config.ts",[],"/home/ayman/projects/uedokkaneh/src/data/actions.ts",[],"/home/ayman/projects/uedokkaneh/src/pages/footer.tsx",["216","217"],"import { IonBadge, IonButtons, IonFooter, IonIcon, IonToolbar } from '@ionic/react'\nimport { cartOutline, homeOutline } from 'ionicons/icons'\nimport { useHistory } from 'react-router'\nimport { useSelector } from 'react-redux'\nimport { BasketPack, State } from '../data/types'\n\nconst Footer = () => {\n  const stateBasket = useSelector<State, BasketPack[]>(state => state.basket)\n  const history = useHistory()\n  return (\n    <IonFooter>\n      <IonToolbar>\n        <IonButtons slot=\"start\" onClick={() => history.push('/')}>\n          <IonIcon \n            ios={homeOutline} \n            color=\"primary\" \n            style={{fontSize: '20px', marginRight: '10px'}} \n          />\n        </IonButtons>\n        <IonButtons slot=\"end\" onClick={() => {if (stateBasket.length > 0) history.push('/basket')}}>\n          {stateBasket.length > 0 && <IonBadge className=\"badge\" style={{right: '10px'}}>{stateBasket.length}</IonBadge>}\n          <IonIcon \n            ios={cartOutline} \n            style={{fontSize: '25px', marginLeft: '10px'}} \n            color=\"primary\"\n          />\n        </IonButtons>\n      </IonToolbar>\n    </IonFooter>\n  )\n}\n\nexport default Footer","/home/ayman/projects/uedokkaneh/src/pages/rating-stars.tsx",[],["218","219"],"/home/ayman/projects/uedokkaneh/src/pages/header.tsx",["220","221"],"import { IonButtons, IonHeader, IonIcon, IonSearchbar, IonTitle, IonToolbar } from '@ionic/react'\nimport { chevronForwardOutline } from 'ionicons/icons'\nimport { useState } from 'react'\nimport { useHistory } from 'react-router'\nimport labels from '../data/labels'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { State } from '../data/types'\n\ntype Props = {\n  title?: string,\n  withSearch?: boolean\n}\nconst Header = (props: Props) => {\n  const dispatch = useDispatch()\n  const stateSearchText = useSelector<State, string>(state => state.searchText)\n  const [visible, setVisible] = useState(false)\n  const history = useHistory()\n  const handleVisible = () => {\n    dispatch({type: 'CLEAR_SEARCH'})\n    setVisible(true)\n  }\n  return (\n    <IonHeader>\n      <IonToolbar>\n        <IonButtons slot=\"start\" onClick={() => history.goBack()}>\n          <IonIcon\n            ios={chevronForwardOutline} \n            color=\"primary\" \n            style={{fontSize: '20px', marginRight: '10px'}} \n          />\n        </IonButtons>\n        {props.withSearch && \n          <IonButtons slot=\"end\" onClick={handleVisible}>\n            <IonIcon \n              name=\"search-outline\" \n              color=\"primary\" \n              size=\"small\" \n              style={{fontSize: '20px', marginLeft: '10px'}}\n            />\n          </IonButtons>\n        }\n        <IonTitle>{props.title}</IonTitle>\n      </IonToolbar>\n      {visible && \n        <IonToolbar>\n          <IonSearchbar\n            placeholder={labels.search} \n            value={stateSearchText} \n            onIonChange={e => dispatch({type: 'SET_SEARCH', payload: e.detail.value})}\n          />\n        </IonToolbar>\n      }\n    </IonHeader>\n  )\n}\n\nexport default Header",{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","replacedBy":"225"},{"ruleId":"226","severity":1,"message":"227","line":218,"column":6,"nodeType":"228","endLine":218,"endColumn":8,"suggestions":"229"},{"ruleId":"230","severity":1,"message":"231","line":1,"column":10,"nodeType":"232","messageId":"233","endLine":1,"endColumn":20},{"ruleId":"230","severity":1,"message":"234","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":1,"column":10,"nodeType":"232","messageId":"233","endLine":1,"endColumn":20},{"ruleId":"230","severity":1,"message":"234","line":3,"column":10,"nodeType":"232","messageId":"233","endLine":3,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":1,"column":10,"nodeType":"232","messageId":"233","endLine":1,"endColumn":20},{"ruleId":"230","severity":1,"message":"234","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":1,"column":10,"nodeType":"232","messageId":"233","endLine":1,"endColumn":20},{"ruleId":"230","severity":1,"message":"234","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":1,"column":10,"nodeType":"232","messageId":"233","endLine":1,"endColumn":20},{"ruleId":"230","severity":1,"message":"234","line":3,"column":10,"nodeType":"232","messageId":"233","endLine":3,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":1,"column":10,"nodeType":"232","messageId":"233","endLine":1,"endColumn":20},{"ruleId":"230","severity":1,"message":"234","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":1,"column":10,"nodeType":"232","messageId":"233","endLine":1,"endColumn":20},{"ruleId":"230","severity":1,"message":"234","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":1,"column":10,"nodeType":"232","messageId":"233","endLine":1,"endColumn":20},{"ruleId":"230","severity":1,"message":"234","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":1,"column":10,"nodeType":"232","messageId":"233","endLine":1,"endColumn":20},{"ruleId":"230","severity":1,"message":"234","line":4,"column":10,"nodeType":"232","messageId":"233","endLine":4,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":1,"column":31,"nodeType":"232","messageId":"233","endLine":1,"endColumn":41},{"ruleId":"230","severity":1,"message":"234","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":1,"column":31,"nodeType":"232","messageId":"233","endLine":1,"endColumn":41},{"ruleId":"230","severity":1,"message":"234","line":7,"column":10,"nodeType":"232","messageId":"233","endLine":7,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":1,"column":10,"nodeType":"232","messageId":"233","endLine":1,"endColumn":20},{"ruleId":"230","severity":1,"message":"234","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":1,"column":10,"nodeType":"232","messageId":"233","endLine":1,"endColumn":20},{"ruleId":"230","severity":1,"message":"234","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":1,"column":10,"nodeType":"232","messageId":"233","endLine":1,"endColumn":20},{"ruleId":"230","severity":1,"message":"234","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":1,"column":10,"nodeType":"232","messageId":"233","endLine":1,"endColumn":20},{"ruleId":"230","severity":1,"message":"234","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":1,"column":10,"nodeType":"232","messageId":"233","endLine":1,"endColumn":20},{"ruleId":"230","severity":1,"message":"234","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":1,"column":10,"nodeType":"232","messageId":"233","endLine":1,"endColumn":20},{"ruleId":"230","severity":1,"message":"234","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":1,"column":10,"nodeType":"232","messageId":"233","endLine":1,"endColumn":20},{"ruleId":"230","severity":1,"message":"234","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":1,"column":10,"nodeType":"232","messageId":"233","endLine":1,"endColumn":20},{"ruleId":"230","severity":1,"message":"231","line":1,"column":10,"nodeType":"232","messageId":"233","endLine":1,"endColumn":20},{"ruleId":"230","severity":1,"message":"234","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":1,"column":10,"nodeType":"232","messageId":"233","endLine":1,"endColumn":20},{"ruleId":"230","severity":1,"message":"234","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":1,"column":10,"nodeType":"232","messageId":"233","endLine":1,"endColumn":20},{"ruleId":"230","severity":1,"message":"234","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":22},{"ruleId":"222","replacedBy":"235"},{"ruleId":"224","replacedBy":"236"},{"ruleId":"230","severity":1,"message":"231","line":3,"column":10,"nodeType":"232","messageId":"233","endLine":3,"endColumn":20},{"ruleId":"230","severity":1,"message":"234","line":6,"column":10,"nodeType":"232","messageId":"233","endLine":6,"endColumn":22},"no-native-reassign",["237"],"no-negated-in-lhs",["238"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["239"],"@typescript-eslint/no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'StateContext' is defined but never used.",["237"],["238"],"no-global-assign","no-unsafe-negation",{"desc":"240","fix":"241"},"Update the dependencies array to be: [dispatch]",{"range":"242","text":"243"},[8285,8287],"[dispatch]"]